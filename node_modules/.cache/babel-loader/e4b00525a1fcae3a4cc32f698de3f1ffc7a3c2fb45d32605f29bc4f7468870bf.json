{"ast":null,"code":"\n\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import axios from 'axios';\n\n// const AdminDashboard = () => {\n//   const [users, setUsers] = useState([]); // All users fetched from the backend\n//   const [filteredUsers, setFilteredUsers] = useState([]); // Users filtered by paid photographers\n//   const [showPaidOnly, setShowPaidOnly] = useState(false); // Toggle for filtering paid photographers\n//   const [payments, setPayments] = useState([]); // Payments data fetched from the backend\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   // Effect to handle authentication and data fetching\n//   useEffect(() => {\n//     const authToken = sessionStorage.getItem('authToken'); // Get JWT token from session storage\n//     const userRole = sessionStorage.getItem('userRole');   // Get user role from session storage\n\n//     // If no token or user is not admin, redirect to login\n//     if (!authToken || userRole !== 'admin') {\n//       navigate('/auth');\n//     } else if (location.state === null && location.pathname === '/admin-dashboard') {\n//       // If the user manually types the URL, redirect to login if not authenticated\n//       navigate('/auth');\n//     } else {\n//       // Fetch users and payments once authenticated\n//       fetchUsers(authToken);\n//       fetchPayments(authToken);\n//     }\n//   }, [navigate, location]);\n\n//   // Fetch all users from backend\n//   const fetchUsers = async () => {\n//     try {\n//       const token = sessionStorage.getItem('authToken'); // Retrieve token from sessionStorage\n//       const response = await axios.get('http://localhost:5001/api/users/admin-data', {\n//         headers: { Authorization: `Bearer ${token}` }, // Pass token in Authorization header\n//       });\n//       console.log('Users data:', response.data.users); // Debug log\n//       setUsers(response.data.users); // Set users to state\n//     } catch (error) {\n//       console.error('Error fetching users:', error); // Log error if request fails\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchUsers(); // Call the function when the component mounts\n//   }, []);\n\n//   // Fetch payments from backend\n//   const fetchPayments = async (token) => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/admin/payments', {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       setPayments(response.data.payments); // Set payments state with fetched data\n//     } catch (error) {\n//       console.error('Error fetching payments', error);\n//     }\n//   };\n\n//   // Handle filter for showing only paid photographers\n//   const handleFilterChange = () => {\n//     setShowPaidOnly(!showPaidOnly);\n//     if (!showPaidOnly) {\n//       const paidPhotographers = users.filter(user => user.isPaid && user.role === 'photographer');\n//       setFilteredUsers(paidPhotographers); // Show only paid photographers\n//     } else {\n//       setFilteredUsers(users); // Show all users when filter is turned off\n//     }\n//   };\n\n//   // Handle logout: Remove token and role from session storage\n//   const handleLogout = () => {\n//     sessionStorage.removeItem('authToken');\n//     sessionStorage.removeItem('userRole');\n//     navigate('/auth'); // Redirect to login page after logout\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h1>Admin Dashboard</h1>\n\n//       {/* Logout Button */}\n//       <button className=\"btn btn-dark\" onClick={handleLogout}>Logout</button>\n\n//       {/* User List */}\n//       <div className=\"user-list\">\n//         <h2>Users</h2>\n//         {/* Checkbox to filter only paid photographers */}\n//         <label>\n//           <input\n//             type=\"checkbox\"\n//             checked={showPaidOnly}\n//             onChange={handleFilterChange}\n//           />\n//           Show Paid Photographers Only\n//         </label>\n//         <ul>\n//           {filteredUsers.map(user => (\n//             <li key={user._id}>\n//               {user.name} ({user.email}) - {user.role}\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n\n//       {/* Payment Tracking */}\n//       <div className=\"payment-tracking\">\n//         <h2>Payment Tracking</h2>\n//         <ul>\n//           {payments.map(payment => (\n//             <li key={payment._id}>\n//               {payment.userEmail} - {payment.planName}: ${payment.planPrice} ({payment.status})\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AdminDashboard;","map":{"version":3,"names":[],"sources":["/home/krish/Documents/project/picrego main/picrego/Frontend/src/Components/Dashboards/AdminDashboard.js"],"sourcesContent":["\n\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import axios from 'axios';\n\n// const AdminDashboard = () => {\n//   const [users, setUsers] = useState([]); // All users fetched from the backend\n//   const [filteredUsers, setFilteredUsers] = useState([]); // Users filtered by paid photographers\n//   const [showPaidOnly, setShowPaidOnly] = useState(false); // Toggle for filtering paid photographers\n//   const [payments, setPayments] = useState([]); // Payments data fetched from the backend\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   // Effect to handle authentication and data fetching\n//   useEffect(() => {\n//     const authToken = sessionStorage.getItem('authToken'); // Get JWT token from session storage\n//     const userRole = sessionStorage.getItem('userRole');   // Get user role from session storage\n\n//     // If no token or user is not admin, redirect to login\n//     if (!authToken || userRole !== 'admin') {\n//       navigate('/auth');\n//     } else if (location.state === null && location.pathname === '/admin-dashboard') {\n//       // If the user manually types the URL, redirect to login if not authenticated\n//       navigate('/auth');\n//     } else {\n//       // Fetch users and payments once authenticated\n//       fetchUsers(authToken);\n//       fetchPayments(authToken);\n//     }\n//   }, [navigate, location]);\n\n//   // Fetch all users from backend\n//   const fetchUsers = async () => {\n//     try {\n//       const token = sessionStorage.getItem('authToken'); // Retrieve token from sessionStorage\n//       const response = await axios.get('http://localhost:5001/api/users/admin-data', {\n//         headers: { Authorization: `Bearer ${token}` }, // Pass token in Authorization header\n//       });\n//       console.log('Users data:', response.data.users); // Debug log\n//       setUsers(response.data.users); // Set users to state\n//     } catch (error) {\n//       console.error('Error fetching users:', error); // Log error if request fails\n//     }\n//   };\n  \n//   useEffect(() => {\n//     fetchUsers(); // Call the function when the component mounts\n//   }, []);\n  \n//   // Fetch payments from backend\n//   const fetchPayments = async (token) => {\n//     try {\n//       const response = await axios.get('http://localhost:5001/api/admin/payments', {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       setPayments(response.data.payments); // Set payments state with fetched data\n//     } catch (error) {\n//       console.error('Error fetching payments', error);\n//     }\n//   };\n\n//   // Handle filter for showing only paid photographers\n//   const handleFilterChange = () => {\n//     setShowPaidOnly(!showPaidOnly);\n//     if (!showPaidOnly) {\n//       const paidPhotographers = users.filter(user => user.isPaid && user.role === 'photographer');\n//       setFilteredUsers(paidPhotographers); // Show only paid photographers\n//     } else {\n//       setFilteredUsers(users); // Show all users when filter is turned off\n//     }\n//   };\n\n//   // Handle logout: Remove token and role from session storage\n//   const handleLogout = () => {\n//     sessionStorage.removeItem('authToken');\n//     sessionStorage.removeItem('userRole');\n//     navigate('/auth'); // Redirect to login page after logout\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h1>Admin Dashboard</h1>\n\n//       {/* Logout Button */}\n//       <button className=\"btn btn-dark\" onClick={handleLogout}>Logout</button>\n\n//       {/* User List */}\n//       <div className=\"user-list\">\n//         <h2>Users</h2>\n//         {/* Checkbox to filter only paid photographers */}\n//         <label>\n//           <input\n//             type=\"checkbox\"\n//             checked={showPaidOnly}\n//             onChange={handleFilterChange}\n//           />\n//           Show Paid Photographers Only\n//         </label>\n//         <ul>\n//           {filteredUsers.map(user => (\n//             <li key={user._id}>\n//               {user.name} ({user.email}) - {user.role}\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n\n//       {/* Payment Tracking */}\n//       <div className=\"payment-tracking\">\n//         <h2>Payment Tracking</h2>\n//         <ul>\n//           {payments.map(payment => (\n//             <li key={payment._id}>\n//               {payment.userEmail} - {payment.planName}: ${payment.planPrice} ({payment.status})\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AdminDashboard;\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}