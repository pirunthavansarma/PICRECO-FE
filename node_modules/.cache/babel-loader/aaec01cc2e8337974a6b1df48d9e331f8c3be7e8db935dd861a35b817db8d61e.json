{"ast":null,"code":"\n// import React from 'react';\n// import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\n// import LandingPage from '../src/Components/LandingPage/LandingPage'; // Import LandingPage\n// // import About from '../src/Components/LandingPage/About';\n// import AuthForm from '../src/Components/Authentication/AuthForm';\n// import AdminDashboard from '../src/Components/Dashboards/AdminDashboard';\n// import PhotographerDashboard from '../src/Components/EventManagement/PhtographerDashboard'; // Spelling fixed\n// import EventPage from '../src/Components/EventManagement/Eventpage';\n// import PaymentPage from '../src/Components/Payment/Payment';\n// import PhotoUpload from '../src/Components/EventManagement/photoUpload'; // Ensure proper case\n// import UserManagement from '../src/Components/Dashboards/UserManagement'; // Import the new UserManagement component\n\n// import './App.css';\n\n// // PrivateRoute component handles redirection based on user role and subscription status\n// const PrivateRoute = ({ children, role }) => {\n//   const userRole = sessionStorage.getItem('userRole');\n//   const isSubscribed = sessionStorage.getItem('isSubscribed');\n\n//   // Redirect to login if user role doesn't match or not logged in\n//   if (!userRole || userRole !== role) {\n//     return <Navigate to=\"/auth\" />;\n//   }\n\n//   // Redirect to payment page if user is not subscribed\n//   // if (role === 'user' && !isSubscribed) {\n//   //   return <Navigate to=\"/payment\" />;\n//   // }\n\n//   return children;\n// };\n\n// function App() {\n//   return (\n//     <Router>\n//       <Routes>\n//       <Route path=\"/*\" element={<LandingPage />} />\n//       <Route path=\"/auth\" element={<AuthForm />} />\n//         <Route path=\"/admin\" element={<PrivateRoute role=\"admin\"><AdminDashboard /></PrivateRoute>} />\n//         <Route path=\"/admin-dashboard/users\" element={<UserManagement />} /> {/* Add new route for UserManagement */}\n//         <Route path=\"/Eventpage\" element={<PrivateRoute role=\"user\"><EventPage /></PrivateRoute>} />\n//         <Route path=\"/payment\" element={<PaymentPage />} />\n//         <Route path=\"/photographer-dashboard\" element={<PrivateRoute role=\"user\"><PhotographerDashboard /></PrivateRoute>} />\n//         <Route path=\"/upload-photos\" element={<PrivateRoute role=\"user\"><PhotoUpload /></PrivateRoute>} />\n//       </Routes>\n//     </Router>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/home/krish/Documents/project/picrego main/picrego/Frontend/src/App.js"],"sourcesContent":["\n// import React from 'react';\n// import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\n// import LandingPage from '../src/Components/LandingPage/LandingPage'; // Import LandingPage\n// // import About from '../src/Components/LandingPage/About';\n// import AuthForm from '../src/Components/Authentication/AuthForm';\n// import AdminDashboard from '../src/Components/Dashboards/AdminDashboard';\n// import PhotographerDashboard from '../src/Components/EventManagement/PhtographerDashboard'; // Spelling fixed\n// import EventPage from '../src/Components/EventManagement/Eventpage';\n// import PaymentPage from '../src/Components/Payment/Payment';\n// import PhotoUpload from '../src/Components/EventManagement/photoUpload'; // Ensure proper case\n// import UserManagement from '../src/Components/Dashboards/UserManagement'; // Import the new UserManagement component\n\n// import './App.css';\n\n\n// // PrivateRoute component handles redirection based on user role and subscription status\n// const PrivateRoute = ({ children, role }) => {\n//   const userRole = sessionStorage.getItem('userRole');\n//   const isSubscribed = sessionStorage.getItem('isSubscribed');\n\n//   // Redirect to login if user role doesn't match or not logged in\n//   if (!userRole || userRole !== role) {\n//     return <Navigate to=\"/auth\" />;\n//   }\n\n//   // Redirect to payment page if user is not subscribed\n//   // if (role === 'user' && !isSubscribed) {\n//   //   return <Navigate to=\"/payment\" />;\n//   // }\n\n//   return children;\n// };\n\n// function App() {\n//   return (\n//     <Router>\n//       <Routes>\n//       <Route path=\"/*\" element={<LandingPage />} />\n//       <Route path=\"/auth\" element={<AuthForm />} />\n//         <Route path=\"/admin\" element={<PrivateRoute role=\"admin\"><AdminDashboard /></PrivateRoute>} />\n//         <Route path=\"/admin-dashboard/users\" element={<UserManagement />} /> {/* Add new route for UserManagement */}\n//         <Route path=\"/Eventpage\" element={<PrivateRoute role=\"user\"><EventPage /></PrivateRoute>} />\n//         <Route path=\"/payment\" element={<PaymentPage />} />\n//         <Route path=\"/photographer-dashboard\" element={<PrivateRoute role=\"user\"><PhotographerDashboard /></PrivateRoute>} />\n//         <Route path=\"/upload-photos\" element={<PrivateRoute role=\"user\"><PhotoUpload /></PrivateRoute>} />\n//       </Routes>\n//     </Router>\n//   );\n// }\n\n// export default App;\n\n\n"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}