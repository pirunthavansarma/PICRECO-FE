{"ast":null,"code":"export const uploadImages = async (images, name, eventName) => {\n  const formData = new FormData();\n  formData.append('name', name);\n  formData.append('eventName', eventName);\n  for (const image of images) {\n    formData.append('photos', image);\n  }\n  const token = sessionStorage.getItem('token');\n\n  // if (!token) {\n  //   console.error('No token found. User is not authenticated.');\n  //   return []; // Stop the upload process if no token is found\n  // }\n\n  try {\n    const eventID = 'someEventID'; // Update this to get the actual event ID.\n\n    const response = await fetch(`http://localhost:5001/api/photos/upload/${eventID}`, {\n      method: \"POST\",\n      headers: {\n        'Authorization': `Bearer ${token}` // Send the token with the request\n      },\n      body: formData,\n      credentials: 'inc'\n    });\n    if (response.ok) {\n      const data = await response.json();\n      return data.imageUrls;\n    } else {\n      console.error(`Error uploading images: ${response.status} ${response.statusText}`);\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error uploading images:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["uploadImages","images","name","eventName","formData","FormData","append","image","token","sessionStorage","getItem","eventID","response","fetch","method","headers","body","credentials","ok","data","json","imageUrls","console","error","status","statusText"],"sources":["/home/krish/Documents/project/picrego photoupload/picrego/Frontend/src/util/uploadImages.js"],"sourcesContent":["export const uploadImages = async (images, name, eventName) => {\n  const formData = new FormData();\n\n  formData.append('name', name);\n  formData.append('eventName', eventName);\n\n  for (const image of images) {\n    formData.append('photos', image);\n  }\n\n  const token = sessionStorage.getItem('token');\n\n  // if (!token) {\n  //   console.error('No token found. User is not authenticated.');\n  //   return []; // Stop the upload process if no token is found\n  // }\n\n  try {\n    const eventID = 'someEventID'; // Update this to get the actual event ID.\n\n    const response = await fetch(`http://localhost:5001/api/photos/upload/${eventID}`, {\n      method: \"POST\",\n      headers: {\n        'Authorization': `Bearer ${token}`, // Send the token with the request\n      },\n      body: formData,\n      credentials:'inc'\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      return data.imageUrls;\n    } else {\n      console.error(`Error uploading images: ${response.status} ${response.statusText}`);\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error uploading images:\", error);\n    return [];\n  }\n};"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG,MAAAA,CAAOC,MAAM,EAAEC,IAAI,EAAEC,SAAS,KAAK;EAC7D,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAE/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;EAC7BE,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEH,SAAS,CAAC;EAEvC,KAAK,MAAMI,KAAK,IAAIN,MAAM,EAAE;IAC1BG,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEC,KAAK,CAAC;EAClC;EAEA,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE7C;EACA;EACA;EACA;;EAEA,IAAI;IACF,MAAMC,OAAO,GAAG,aAAa,CAAC,CAAC;;IAE/B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2CF,OAAO,EAAE,EAAE;MACjFG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,eAAe,EAAE,UAAUP,KAAK,EAAE,CAAE;MACtC,CAAC;MACDQ,IAAI,EAAEZ,QAAQ;MACda,WAAW,EAAC;IACd,CAAC,CAAC;IAEF,IAAIL,QAAQ,CAACM,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACE,SAAS;IACvB,CAAC,MAAM;MACLC,OAAO,CAACC,KAAK,CAAC,2BAA2BX,QAAQ,CAACY,MAAM,IAAIZ,QAAQ,CAACa,UAAU,EAAE,CAAC;MAClF,OAAO,EAAE;IACX;EACF,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}