{"ast":null,"code":"// export const uploadImages = async (images) => {\n//   const formData = new FormData();\n\n//   for (const image of images) {\n//     formData.append('myimage', image);\n//   }\n\n//   try {\n//     const response = await fetch(\"http://localhost:5001/api/upload/uploadimage\", {\n//       method: \"POST\",\n//       body: formData,\n//     });\n\n//     if (response.ok) {\n//       const data = await response.json();\n//       console.log(\"Images uploaded successfully:\", data);\n//       return data.imageUrl; // Assuming the API returns an array of image URLs\n//     } else {\n//       console.error(\"Failed to upload the images.\");\n//       return [];\n//     }\n//   } catch (error) {\n//     console.error(\"Error:\", error);\n//     return [];\n//   }\n// };\n\nexport const uploadImages = async (images, eventID) => {\n  const formData = new FormData();\n  for (const image of images) {\n    formData.append('photos', image);\n  }\n  try {\n    const response = await fetch(`http://localhost:5001/api/upload/${eventID}`, {\n      method: \"POST\",\n      body: formData\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log(\"Images uploaded successfully:\", data);\n      return data.imageUrls; // Return the array of image URLs\n    } else {\n      console.error(\"Failed to upload images.\");\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["uploadImages","images","eventID","formData","FormData","image","append","response","fetch","method","body","ok","data","json","console","log","imageUrls","error"],"sources":["/home/krish/Documents/project/picrego main/picrego/Frontend/src/util/uploadImages.js"],"sourcesContent":["\n// export const uploadImages = async (images) => {\n//   const formData = new FormData();\n\n//   for (const image of images) {\n//     formData.append('myimage', image);\n//   }\n\n//   try {\n//     const response = await fetch(\"http://localhost:5001/api/upload/uploadimage\", {\n//       method: \"POST\",\n//       body: formData,\n//     });\n\n//     if (response.ok) {\n//       const data = await response.json();\n//       console.log(\"Images uploaded successfully:\", data);\n//       return data.imageUrl; // Assuming the API returns an array of image URLs\n//     } else {\n//       console.error(\"Failed to upload the images.\");\n//       return [];\n//     }\n//   } catch (error) {\n//     console.error(\"Error:\", error);\n//     return [];\n//   }\n// };\n\n\nexport const uploadImages = async (images, eventID) => {\n  const formData = new FormData();\n  for (const image of images) {\n      formData.append('photos', image);\n  }\n\n  try {\n      const response = await fetch(`http://localhost:5001/api/upload/${eventID}`, {\n          method: \"POST\",\n          body: formData,\n      });\n\n      if (response.ok) {\n          const data = await response.json();\n          console.log(\"Images uploaded successfully:\", data);\n          return data.imageUrls; // Return the array of image URLs\n      } else {\n          console.error(\"Failed to upload images.\");\n          return [];\n      }\n  } catch (error) {\n      console.error(\"Error:\", error);\n      return [];\n  }\n};\n"],"mappings":"AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMA,YAAY,GAAG,MAAAA,CAAOC,MAAM,EAAEC,OAAO,KAAK;EACrD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/B,KAAK,MAAMC,KAAK,IAAIJ,MAAM,EAAE;IACxBE,QAAQ,CAACG,MAAM,CAAC,QAAQ,EAAED,KAAK,CAAC;EACpC;EAEA,IAAI;IACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoCN,OAAO,EAAE,EAAE;MACxEO,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEP;IACV,CAAC,CAAC;IAEF,IAAII,QAAQ,CAACI,EAAE,EAAE;MACb,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEH,IAAI,CAAC;MAClD,OAAOA,IAAI,CAACI,SAAS,CAAC,CAAC;IAC3B,CAAC,MAAM;MACHF,OAAO,CAACG,KAAK,CAAC,0BAA0B,CAAC;MACzC,OAAO,EAAE;IACb;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACZH,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAO,EAAE;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}