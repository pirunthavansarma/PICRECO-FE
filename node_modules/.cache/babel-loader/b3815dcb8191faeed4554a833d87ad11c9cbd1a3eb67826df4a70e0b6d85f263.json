{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './UserManagement.css'; // Create and style this file\n\n// const UserManagement = () => {\n//   const [users, setUsers] = useState([]);\n//   const [filteredUsers, setFilteredUsers] = useState([]);\n//   const [showPaidOnly, setShowPaidOnly] = useState(false);\n\n//   useEffect(() => {\n//     const fetchUsers = async () => {\n//       try {\n//         const token = sessionStorage.getItem('authToken');\n//         const response = await axios.get('http://localhost:5001/api/users/admin-data', {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         setUsers(response.data.users);\n//         setFilteredUsers(response.data.users); // Initially set all users as filtered users\n//       } catch (error) {\n//         console.error('Error fetching users:', error);\n//       }\n//     };\n\n//     fetchUsers();\n//   }, []);\n\n//   const handleFilterChange = () => {\n//     setShowPaidOnly(!showPaidOnly);\n//     if (!showPaidOnly) {\n//       const paidPhotographers = users.filter(user => user.isPaid && user.role === 'photographer');\n//       setFilteredUsers(paidPhotographers);\n//     } else {\n//       setFilteredUsers(users);\n//     }\n//   };\n\n//   const handleDelete = async (userId) => {\n//     try {\n//       const token = sessionStorage.getItem('authToken');\n//       await axios.delete(`http://localhost:5001/api/users/${userId}`, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       setUsers(users.filter(user => user._id !== userId));\n//       setFilteredUsers(filteredUsers.filter(user => user._id !== userId));\n//     } catch (error) {\n//       console.error('Error deleting user:', error);\n//     }\n//   };\n\n//   const handleBlockToggle = async (userId) => {\n//     try {\n//       const token = sessionStorage.getItem('authToken');\n//       const user = users.find(user => user._id === userId);\n//       const newBlockStatus = !user.isBlocked;\n//       const response = await axios.put(`http://localhost:5001/api/users/${userId}`, { isBlocked: newBlockStatus }, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       const updatedUser = response.data.user;\n\n//       // Update state to reflect new blocked status\n//       const updatedUsers = users.map(user =>\n//         user._id === userId ? updatedUser : user\n//       );\n//       setUsers(updatedUsers);\n//       setFilteredUsers(updatedUsers);\n//     } catch (error) {\n//       console.error('Error updating block status:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"user-management-container\">\n//       <h1>User Management</h1>\n\n//       {/* Filter Checkbox */}\n//       <label>\n//         <input\n//           type=\"checkbox\"\n//           checked={showPaidOnly}\n//           onChange={handleFilterChange}\n//         />\n//         Show Paid Photographers Only\n//       </label>\n\n//       <div className=\"user-cards\">\n//         {filteredUsers.map(user => (\n//           <div className=\"user-card\" key={user._id}>\n//             <h2>{user.name}</h2>\n//             <p>Email: {user.email}</p>\n//             <p>Role: {user.role}</p>\n//             <p>Plan: {user.planName}</p>\n//             <p>Payment Status: {user.isPaid ? 'Paid' : 'Unpaid'}</p>\n//             <p>Blocked: {user.isBlocked ? 'Yes' : 'No'}</p>\n//             <button onClick={() => handleDelete(user._id)}>Delete</button>\n//             <button onClick={() => handleBlockToggle(user._id)}>\n//               {user.isBlocked ? 'Unblock' : 'Block'}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default UserManagement;\n\nimport React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './UserManagement.css'; // Ensure this file exists and is styled\n\n// const UserManagement = () => {\n//   const [users, setUsers] = useState([]);\n//   const [filteredUsers, setFilteredUsers] = useState([]);\n//   const [showPaidOnly, setShowPaidOnly] = useState(false);\n\n//   useEffect(() => {\n//     const fetchUsers = async () => {\n//       try {\n//         const token = sessionStorage.getItem('authToken');\n//         const response = await axios.get('http://localhost:5001/api/users/admin-data', {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         setUsers(response.data.users);\n//         setFilteredUsers(response.data.users); // Initially set all users as filtered users\n//       } catch (error) {\n//         console.error('Error fetching users:', error);\n//       }\n//     };\n\n//     fetchUsers();\n//   }, []);\n\n//   const handleFilterChange = () => {\n//     setShowPaidOnly(!showPaidOnly);\n//     if (!showPaidOnly) {\n//       const paidPhotographers = users.filter(user => user.isPaid && user.role === 'photographer');\n//       setFilteredUsers(paidPhotographers);\n//     } else {\n//       setFilteredUsers(users);\n//     }\n//   };\n\n//   const handleDelete = async (userId) => {\n//     try {\n//       const token = sessionStorage.getItem('authToken');\n//       await axios.delete(`http://localhost:5001/api/users/${userId}`, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       setUsers(users.filter(user => user._id !== userId));\n//       setFilteredUsers(filteredUsers.filter(user => user._id !== userId));\n//     } catch (error) {\n//       console.error('Error deleting user:', error);\n//     }\n//   };\n\n//   const handleBlockToggle = async (userId) => {\n//     try {\n//       const token = sessionStorage.getItem('authToken');\n//       const user = users.find(user => user._id === userId);\n//       const newBlockStatus = !user.isBlocked;\n//       const response = await axios.put(`http://localhost:5001/api/users/${userId}`, { isBlocked: newBlockStatus }, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       const updatedUser = response.data.user;\n\n//       // Update state to reflect new blocked status\n//       const updatedUsers = users.map(user =>\n//         user._id === userId ? updatedUser : user\n//       );\n//       setUsers(updatedUsers);\n//       setFilteredUsers(updatedUsers);\n//     } catch (error) {\n//       console.error('Error updating block status:', error);\n//     }\n//   };\n\n//   return (\n\n//     <div className=\"user-managementcontainer\">\n//       <h1>User Management</h1>\n\n//       {/* Filter Checkbox */}\n//       <label>\n//         <input\n//           type=\"checkbox\"\n//           checked={showPaidOnly}\n//           onChange={handleFilterChange}\n//         />\n//         Show Paid Photographers Only\n//       </label>\n\n//       <table className=\"user-table\">\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Email</th>\n//             <th>Role</th>\n//             <th>Plan</th>\n//             <th>Payment Status</th>\n//             <th>Blocked</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredUsers.map(user => (\n//             <tr key={user._id}>\n//               <td>{user.name}</td>\n//               <td className=\"email-column\">{user.email}</td>\n//               <td>{user.role}</td>\n//               <td>{user.planName}</td>\n//               <td>{user.isPaid ? 'Paid' : 'Unpaid'}</td>\n//               <td>{user.isBlocked ? 'Yes' : 'No'}</td>\n//               <td>\n//                 <button onClick={() => handleDelete(user._id)}>Delete</button>\n//                 <button onClick={() => handleBlockToggle(user._id)}>\n//                   {user.isBlocked ? 'Unblock' : 'Block'}\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default UserManagement;","map":{"version":3,"names":["React","useState","useEffect"],"sources":["/home/krish/Documents/project/picrego main/picrego/Frontend/src/Components/Dashboards/UserManagement.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './UserManagement.css'; // Create and style this file\n\n// const UserManagement = () => {\n//   const [users, setUsers] = useState([]);\n//   const [filteredUsers, setFilteredUsers] = useState([]);\n//   const [showPaidOnly, setShowPaidOnly] = useState(false);\n\n//   useEffect(() => {\n//     const fetchUsers = async () => {\n//       try {\n//         const token = sessionStorage.getItem('authToken');\n//         const response = await axios.get('http://localhost:5001/api/users/admin-data', {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         setUsers(response.data.users);\n//         setFilteredUsers(response.data.users); // Initially set all users as filtered users\n//       } catch (error) {\n//         console.error('Error fetching users:', error);\n//       }\n//     };\n\n//     fetchUsers();\n//   }, []);\n\n//   const handleFilterChange = () => {\n//     setShowPaidOnly(!showPaidOnly);\n//     if (!showPaidOnly) {\n//       const paidPhotographers = users.filter(user => user.isPaid && user.role === 'photographer');\n//       setFilteredUsers(paidPhotographers);\n//     } else {\n//       setFilteredUsers(users);\n//     }\n//   };\n\n//   const handleDelete = async (userId) => {\n//     try {\n//       const token = sessionStorage.getItem('authToken');\n//       await axios.delete(`http://localhost:5001/api/users/${userId}`, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       setUsers(users.filter(user => user._id !== userId));\n//       setFilteredUsers(filteredUsers.filter(user => user._id !== userId));\n//     } catch (error) {\n//       console.error('Error deleting user:', error);\n//     }\n//   };\n\n//   const handleBlockToggle = async (userId) => {\n//     try {\n//       const token = sessionStorage.getItem('authToken');\n//       const user = users.find(user => user._id === userId);\n//       const newBlockStatus = !user.isBlocked;\n//       const response = await axios.put(`http://localhost:5001/api/users/${userId}`, { isBlocked: newBlockStatus }, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       const updatedUser = response.data.user;\n\n//       // Update state to reflect new blocked status\n//       const updatedUsers = users.map(user =>\n//         user._id === userId ? updatedUser : user\n//       );\n//       setUsers(updatedUsers);\n//       setFilteredUsers(updatedUsers);\n//     } catch (error) {\n//       console.error('Error updating block status:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"user-management-container\">\n//       <h1>User Management</h1>\n      \n//       {/* Filter Checkbox */}\n//       <label>\n//         <input\n//           type=\"checkbox\"\n//           checked={showPaidOnly}\n//           onChange={handleFilterChange}\n//         />\n//         Show Paid Photographers Only\n//       </label>\n\n//       <div className=\"user-cards\">\n//         {filteredUsers.map(user => (\n//           <div className=\"user-card\" key={user._id}>\n//             <h2>{user.name}</h2>\n//             <p>Email: {user.email}</p>\n//             <p>Role: {user.role}</p>\n//             <p>Plan: {user.planName}</p>\n//             <p>Payment Status: {user.isPaid ? 'Paid' : 'Unpaid'}</p>\n//             <p>Blocked: {user.isBlocked ? 'Yes' : 'No'}</p>\n//             <button onClick={() => handleDelete(user._id)}>Delete</button>\n//             <button onClick={() => handleBlockToggle(user._id)}>\n//               {user.isBlocked ? 'Unblock' : 'Block'}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default UserManagement;\n\nimport React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './UserManagement.css'; // Ensure this file exists and is styled\n\n// const UserManagement = () => {\n//   const [users, setUsers] = useState([]);\n//   const [filteredUsers, setFilteredUsers] = useState([]);\n//   const [showPaidOnly, setShowPaidOnly] = useState(false);\n\n//   useEffect(() => {\n//     const fetchUsers = async () => {\n//       try {\n//         const token = sessionStorage.getItem('authToken');\n//         const response = await axios.get('http://localhost:5001/api/users/admin-data', {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         setUsers(response.data.users);\n//         setFilteredUsers(response.data.users); // Initially set all users as filtered users\n//       } catch (error) {\n//         console.error('Error fetching users:', error);\n//       }\n//     };\n\n//     fetchUsers();\n//   }, []);\n\n//   const handleFilterChange = () => {\n//     setShowPaidOnly(!showPaidOnly);\n//     if (!showPaidOnly) {\n//       const paidPhotographers = users.filter(user => user.isPaid && user.role === 'photographer');\n//       setFilteredUsers(paidPhotographers);\n//     } else {\n//       setFilteredUsers(users);\n//     }\n//   };\n\n//   const handleDelete = async (userId) => {\n//     try {\n//       const token = sessionStorage.getItem('authToken');\n//       await axios.delete(`http://localhost:5001/api/users/${userId}`, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       setUsers(users.filter(user => user._id !== userId));\n//       setFilteredUsers(filteredUsers.filter(user => user._id !== userId));\n//     } catch (error) {\n//       console.error('Error deleting user:', error);\n//     }\n//   };\n\n//   const handleBlockToggle = async (userId) => {\n//     try {\n//       const token = sessionStorage.getItem('authToken');\n//       const user = users.find(user => user._id === userId);\n//       const newBlockStatus = !user.isBlocked;\n//       const response = await axios.put(`http://localhost:5001/api/users/${userId}`, { isBlocked: newBlockStatus }, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       const updatedUser = response.data.user;\n\n//       // Update state to reflect new blocked status\n//       const updatedUsers = users.map(user =>\n//         user._id === userId ? updatedUser : user\n//       );\n//       setUsers(updatedUsers);\n//       setFilteredUsers(updatedUsers);\n//     } catch (error) {\n//       console.error('Error updating block status:', error);\n//     }\n//   };\n\n//   return (\n    \n//     <div className=\"user-managementcontainer\">\n//       <h1>User Management</h1>\n\n//       {/* Filter Checkbox */}\n//       <label>\n//         <input\n//           type=\"checkbox\"\n//           checked={showPaidOnly}\n//           onChange={handleFilterChange}\n//         />\n//         Show Paid Photographers Only\n//       </label>\n\n//       <table className=\"user-table\">\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Email</th>\n//             <th>Role</th>\n//             <th>Plan</th>\n//             <th>Payment Status</th>\n//             <th>Blocked</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredUsers.map(user => (\n//             <tr key={user._id}>\n//               <td>{user.name}</td>\n//               <td className=\"email-column\">{user.email}</td>\n//               <td>{user.role}</td>\n//               <td>{user.planName}</td>\n//               <td>{user.isPaid ? 'Paid' : 'Unpaid'}</td>\n//               <td>{user.isBlocked ? 'Yes' : 'No'}</td>\n//               <td>\n//                 <button onClick={() => handleDelete(user._id)}>Delete</button>\n//                 <button onClick={() => handleBlockToggle(user._id)}>\n//                   {user.isBlocked ? 'Unblock' : 'Block'}\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default UserManagement;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}