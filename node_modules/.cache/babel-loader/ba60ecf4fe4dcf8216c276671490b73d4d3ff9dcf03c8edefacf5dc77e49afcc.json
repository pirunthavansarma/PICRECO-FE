{"ast":null,"code":"// services/uploadImages.js\n\nexport const uploadImages = async (images, name, eventName) => {\n  const formData = new FormData();\n\n  // Append name and eventName to formData\n  formData.append('name', name);\n  formData.append('eventName', eventName);\n\n  // Append selected images to formData\n  for (const image of images) {\n    formData.append('photos', image); // 'photos' is the key expected by the backend\n  }\n  try {\n    const eventID = 'someEventID'; // Replace with actual eventID or make it dynamic\n\n    // Retrieve the JWT token (assuming it's stored in localStorage)\n    const token = localStorage.getItem('token'); // Or get it from wherever you're storing it\n\n    // Ensure the token exists\n    if (!token) {\n      console.error('No token found. User is not authenticated.');\n      return [];\n    }\n    const response = await fetch(`http://localhost:5001/api/photos/upload/${eventID}`, {\n      method: \"POST\",\n      headers: {\n        'Authorization': `Bearer ${token}` // Add the JWT token to the Authorization header\n      },\n      body: formData\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log(\"Images uploaded successfully:\", data);\n      return data.imageUrls; // Assuming the API returns an array of image URLs\n    } else {\n      console.error(\"Failed to upload the images.\");\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["uploadImages","images","name","eventName","formData","FormData","append","image","eventID","token","localStorage","getItem","console","error","response","fetch","method","headers","body","ok","data","json","log","imageUrls"],"sources":["/home/krish/Documents/project/picrego photoupload/picrego/Frontend/src/util/uploadImages.js"],"sourcesContent":["// services/uploadImages.js\n\nexport const uploadImages = async (images, name, eventName) => {\n  const formData = new FormData();\n\n  // Append name and eventName to formData\n  formData.append('name', name);\n  formData.append('eventName', eventName);\n\n  // Append selected images to formData\n  for (const image of images) {\n    formData.append('photos', image);  // 'photos' is the key expected by the backend\n  }\n\n  try {\n    const eventID = 'someEventID'; // Replace with actual eventID or make it dynamic\n\n    // Retrieve the JWT token (assuming it's stored in localStorage)\n    const token = localStorage.getItem('token'); // Or get it from wherever you're storing it\n\n    // Ensure the token exists\n    if (!token) {\n      console.error('No token found. User is not authenticated.');\n      return [];\n    }\n\n    const response = await fetch(`http://localhost:5001/api/photos/upload/${eventID}`, {\n      method: \"POST\",\n      headers: {\n        'Authorization': `Bearer ${token}`,  // Add the JWT token to the Authorization header\n      },\n      body: formData,\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      console.log(\"Images uploaded successfully:\", data);\n      return data.imageUrls; // Assuming the API returns an array of image URLs\n    } else {\n      console.error(\"Failed to upload the images.\");\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n    return [];\n  }\n};\n"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,YAAY,GAAG,MAAAA,CAAOC,MAAM,EAAEC,IAAI,EAAEC,SAAS,KAAK;EAC7D,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;;EAE/B;EACAD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;EAC7BE,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEH,SAAS,CAAC;;EAEvC;EACA,KAAK,MAAMI,KAAK,IAAIN,MAAM,EAAE;IAC1BG,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEC,KAAK,CAAC,CAAC,CAAE;EACrC;EAEA,IAAI;IACF,MAAMC,OAAO,GAAG,aAAa,CAAC,CAAC;;IAE/B;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;IAE7C;IACA,IAAI,CAACF,KAAK,EAAE;MACVG,OAAO,CAACC,KAAK,CAAC,4CAA4C,CAAC;MAC3D,OAAO,EAAE;IACX;IAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2CP,OAAO,EAAE,EAAE;MACjFQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,eAAe,EAAE,UAAUR,KAAK,EAAE,CAAG;MACvC,CAAC;MACDS,IAAI,EAAEd;IACR,CAAC,CAAC;IAEF,IAAIU,QAAQ,CAACK,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCT,OAAO,CAACU,GAAG,CAAC,+BAA+B,EAAEF,IAAI,CAAC;MAClD,OAAOA,IAAI,CAACG,SAAS,CAAC,CAAC;IACzB,CAAC,MAAM;MACLX,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAC;MAC7C,OAAO,EAAE;IACX;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}