{"ast":null,"code":"var _jsxFileName = \"/home/krish/Documents/project/picrego main/picrego/Frontend/src/Components/Payment/Payment.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './Payment.css';\n\n// const PaymentPage = () => {\n//   const [selectedPlan, setSelectedPlan] = useState(null);\n//   const [paypalLoaded, setPaypalLoaded] = useState(false);\n\n//   // State to store selected plan details\n//   const [selectedPlanDetails, setSelectedPlanDetails] = useState({\n//     name: '',\n//     price: ''\n//   });\n\n//   // Define PayPal plan IDs\n//   const plans = [\n//     { name: 'Pro', price: '16.58', storage: '100GB', planId: 'P-0LX228426N2348600M3QPB3Q' }, // Use actual PayPal Plan ID here\n//     { name: 'Ultra', price: '24.91', storage: '500GB', planId: 'P-0LX228426N2348600M3QPB3Q' }, // Use actual PayPal Plan ID here\n//     { name: 'Promax', price: '31.58', storage: '1TB', planId: 'P-0LX228426N2348600M3QPB3Q' }, // Use actual PayPal Plan ID here\n//   ];\n\n//   useEffect(() => {\n//     // Load PayPal SDK script dynamically\n//     const script = document.createElement('script');\n//     script.src = 'https://www.paypal.com/sdk/js?client-id=ARuLPQZ6fA9iKKCu-YyCrFX5OpGJj92bvhHXLFIADCr6q3IU9MM6ILvYhhyYlrJuuZZa5MDm3JRIlt5R&vault=true&intent=subscription';\n//     script.async = true;\n//     script.onload = () => setPaypalLoaded(true);\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script on component unmount\n//     };\n//   }, []);\n\n//   const renderPayPalButton = (planId) => {\n//     if (!paypalLoaded) return;\n\n//     // Remove previous PayPal button if exists\n//     const previousButton = document.getElementById('paypal-button-container');\n//     if (previousButton) {\n//       previousButton.innerHTML = '';\n//     }\n\n//     window.paypal.Buttons({\n//       style: {\n//         shape: 'pill',\n//         color: 'silver',\n//         layout: 'horizontal',\n//         label: 'subscribe'\n//       },\n//       createSubscription: function (data, actions) {\n//         return actions.subscription.create({\n//           plan_id: planId // Use the selected plan ID\n//         });\n//       },\n//       onApprove: function (data, actions) {\n//         alert('Subscription created successfully! Subscription ID: ' + data.subscriptionID);\n//         // Optionally, handle post-approval actions (e.g., update the backend)\n//       },\n//       onError: function (err) {\n//         console.error('PayPal Error:', err);\n//       }\n//     }).render('#paypal-button-container'); // Render PayPal button in the container\n//   };\n\n//   const handleSelectPlan = (plan) => {\n//     setSelectedPlan(plan.planId);\n//     setSelectedPlanDetails({\n//       name: plan.name,\n//       price: plan.prDDBEBEice\n//     });\n//     console.log(`Selected plan ID: ${plan.planId}`); // Debugging statement\n\n//     // Automatically render and open the PayPal subscription modal\n//     renderPayPalButton(plan.planId);\n//     document.getElementById('paypal-button-container').scrollIntoView(); // Scroll to PayPal button container\n//   };\n\n//   return (\n//     <div className=\"payment-page\">\n//       <h2>Select a Plan</h2>\n//       <div className=\"plans-container\">\n//         {plans.map((plan, index) => (\n//           <div className=\"plan-card\" key={index}>\n//             <h3>{plan.name}</h3>\n//             <p>${plan.price} per month</p>\n//             <p>{plan.storage} Storage</p>\n//             <button onClick={() => handleSelectPlan(plan)}>\n//               Select {plan.name}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Display selected plan details */}\n//       {selectedPlan && (\n//         <div className=\"selected-plan-details\">\n//           <h3>Selected Plan</h3>\n//           <p><strong>Name:</strong> {selectedPlanDetails.name}</p>\n//           <p><strong>Price:</strong> ${selectedPlanDetails.price}</p>\n//         </div>\n//       )}\n\n//       {/* PayPal button container */}\n//       <div id=\"paypal-button-container\"></div>\n//     </div>\n//   );\n// };\n\n// export default PaymentPage;\n\nimport React, { useState, useEffect } from 'react';\nimport './Payment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrl = process.env.REACT_APP_BACKEND_URL;\nconst PaymentPage = () => {\n  _s();\n  const [selectedPlan, setSelectedPlan] = useState(null);\n  const [paypalLoaded, setPaypalLoaded] = useState(false);\n\n  // State to store selected plan details\n  const [selectedPlanDetails, setSelectedPlanDetails] = useState({\n    name: '',\n    price: ''\n  });\n\n  // Define PayPal plan IDs\n  const plans = [{\n    name: 'Pro',\n    price: '16.58',\n    storage: '100GB',\n    planId: 'P-0LX228426N2348600M3QPB3Q'\n  }, {\n    name: 'Ultra',\n    price: '24.91',\n    storage: '500GB',\n    planId: 'P-0LX228426N2348600M3QPB3Q'\n  }, {\n    name: 'Promax',\n    price: '31.58',\n    storage: '1TB',\n    planId: 'P-0LX228426N2348600M3QPB3Q'\n  }];\n  useEffect(() => {\n    // Load PayPal SDK script dynamically\n    const script = document.createElement('script');\n    script.src = 'https://www.paypal.com/sdk/js?client-id=ARuLPQZ6fA9iKKCu-YyCrFX5OpGJj92bvhHXLFIADCr6q3IU9MM6ILvYhhyYlrJuuZZa5MDm3JRIlt5R&vault=true&intent=subscription';\n    script.async = true;\n    script.onload = () => setPaypalLoaded(true);\n    document.body.appendChild(script);\n    return () => {\n      document.body.removeChild(script); // Clean up script on component unmount\n    };\n  }, []);\n  const renderPayPalButton = planId => {\n    if (!paypalLoaded) return;\n\n    // Remove previous PayPal button if exists\n    const previousButton = document.getElementById('paypal-button-container');\n    if (previousButton) {\n      previousButton.innerHTML = '';\n    }\n    window.paypal.Buttons({\n      style: {\n        shape: 'pill',\n        color: 'silver',\n        layout: 'horizontal',\n        label: 'subscribe'\n      },\n      createSubscription: function (data, actions) {\n        return actions.subscription.create({\n          plan_id: planId // Use the selected plan ID\n        });\n      },\n      onApprove: function (data, actions) {\n        const subscriptionID = data.subscriptionID;\n        alert('Subscription created successfully! Subscription ID: ' + subscriptionID);\n\n        // Set subscription status to 'true' after successful payment\n        sessionStorage.setItem('subscriptionID', subscriptionID);\n        sessionStorage.setItem('isSubscribed', 'true');\n\n        // Send subscription details to the backend\n        fetch(`${baseUrl}/api/payments/complete-subscription`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            subscriptionID,\n            planId: selectedPlan,\n            planName: selectedPlanDetails.name,\n            planPrice: selectedPlanDetails.price\n          })\n        }).then(response => response.json()).then(data => console.log('Backend response:', data)).catch(error => console.error('Error sending subscription details:', error));\n      },\n      onError: function (err) {\n        console.error('PayPal Error:', err);\n      }\n    }).render('#paypal-button-container'); // Render PayPal button in the container\n  };\n  const handleSelectPlan = plan => {\n    setSelectedPlan(plan.planId);\n    setSelectedPlanDetails({\n      name: plan.name,\n      price: plan.price\n    });\n    console.log(`Selected plan ID: ${plan.planId}`); // Debugging statement\n\n    // Automatically render and open the PayPal subscription modal\n    renderPayPalButton(plan.planId);\n    document.getElementById('paypal-button-container').scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Select a Plan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"plans-container\",\n      children: plans.map((plan, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plan-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: plan.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", plan.price, \" per month\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [plan.storage, \" Storage\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelectPlan(plan),\n          children: [\"Select \", plan.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), selectedPlan && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-plan-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Plan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 14\n        }, this), \" \", selectedPlanDetails.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Price:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 14\n        }, this), \" $\", selectedPlanDetails.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"paypal-button-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentPage, \"+vF4+Tk5RRHRTn9jOF+h3XdMjUI=\");\n_c = PaymentPage;\nexport default PaymentPage;\nvar _c;\n$RefreshReg$(_c, \"PaymentPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","baseUrl","process","env","REACT_APP_BACKEND_URL","PaymentPage","_s","selectedPlan","setSelectedPlan","paypalLoaded","setPaypalLoaded","selectedPlanDetails","setSelectedPlanDetails","name","price","plans","storage","planId","script","document","createElement","src","async","onload","body","appendChild","removeChild","renderPayPalButton","previousButton","getElementById","innerHTML","window","paypal","Buttons","style","shape","color","layout","label","createSubscription","data","actions","subscription","create","plan_id","onApprove","subscriptionID","alert","sessionStorage","setItem","fetch","method","headers","JSON","stringify","planName","planPrice","then","response","json","console","log","catch","error","onError","err","render","handleSelectPlan","plan","scrollIntoView","behavior","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","id","_c","$RefreshReg$"],"sources":["/home/krish/Documents/project/picrego main/picrego/Frontend/src/Components/Payment/Payment.js"],"sourcesContent":["\n// import React, { useState, useEffect } from 'react';\n// import './Payment.css';\n\n// const PaymentPage = () => {\n//   const [selectedPlan, setSelectedPlan] = useState(null);\n//   const [paypalLoaded, setPaypalLoaded] = useState(false);\n\n//   // State to store selected plan details\n//   const [selectedPlanDetails, setSelectedPlanDetails] = useState({\n//     name: '',\n//     price: ''\n//   });\n\n//   // Define PayPal plan IDs\n//   const plans = [\n//     { name: 'Pro', price: '16.58', storage: '100GB', planId: 'P-0LX228426N2348600M3QPB3Q' }, // Use actual PayPal Plan ID here\n//     { name: 'Ultra', price: '24.91', storage: '500GB', planId: 'P-0LX228426N2348600M3QPB3Q' }, // Use actual PayPal Plan ID here\n//     { name: 'Promax', price: '31.58', storage: '1TB', planId: 'P-0LX228426N2348600M3QPB3Q' }, // Use actual PayPal Plan ID here\n//   ];\n\n//   useEffect(() => {\n//     // Load PayPal SDK script dynamically\n//     const script = document.createElement('script');\n//     script.src = 'https://www.paypal.com/sdk/js?client-id=ARuLPQZ6fA9iKKCu-YyCrFX5OpGJj92bvhHXLFIADCr6q3IU9MM6ILvYhhyYlrJuuZZa5MDm3JRIlt5R&vault=true&intent=subscription';\n//     script.async = true;\n//     script.onload = () => setPaypalLoaded(true);\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script on component unmount\n//     };\n//   }, []);\n\n//   const renderPayPalButton = (planId) => {\n//     if (!paypalLoaded) return;\n\n//     // Remove previous PayPal button if exists\n//     const previousButton = document.getElementById('paypal-button-container');\n//     if (previousButton) {\n//       previousButton.innerHTML = '';\n//     }\n\n//     window.paypal.Buttons({\n//       style: {\n//         shape: 'pill',\n//         color: 'silver',\n//         layout: 'horizontal',\n//         label: 'subscribe'\n//       },\n//       createSubscription: function (data, actions) {\n//         return actions.subscription.create({\n//           plan_id: planId // Use the selected plan ID\n//         });\n//       },\n//       onApprove: function (data, actions) {\n//         alert('Subscription created successfully! Subscription ID: ' + data.subscriptionID);\n//         // Optionally, handle post-approval actions (e.g., update the backend)\n//       },\n//       onError: function (err) {\n//         console.error('PayPal Error:', err);\n//       }\n//     }).render('#paypal-button-container'); // Render PayPal button in the container\n//   };\n\n//   const handleSelectPlan = (plan) => {\n//     setSelectedPlan(plan.planId);\n//     setSelectedPlanDetails({\n//       name: plan.name,\n//       price: plan.prDDBEBEice\n//     });\n//     console.log(`Selected plan ID: ${plan.planId}`); // Debugging statement\n\n//     // Automatically render and open the PayPal subscription modal\n//     renderPayPalButton(plan.planId);\n//     document.getElementById('paypal-button-container').scrollIntoView(); // Scroll to PayPal button container\n//   };\n\n//   return (\n//     <div className=\"payment-page\">\n//       <h2>Select a Plan</h2>\n//       <div className=\"plans-container\">\n//         {plans.map((plan, index) => (\n//           <div className=\"plan-card\" key={index}>\n//             <h3>{plan.name}</h3>\n//             <p>${plan.price} per month</p>\n//             <p>{plan.storage} Storage</p>\n//             <button onClick={() => handleSelectPlan(plan)}>\n//               Select {plan.name}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Display selected plan details */}\n//       {selectedPlan && (\n//         <div className=\"selected-plan-details\">\n//           <h3>Selected Plan</h3>\n//           <p><strong>Name:</strong> {selectedPlanDetails.name}</p>\n//           <p><strong>Price:</strong> ${selectedPlanDetails.price}</p>\n//         </div>\n//       )}\n\n//       {/* PayPal button container */}\n//       <div id=\"paypal-button-container\"></div>\n//     </div>\n//   );\n// };\n\n// export default PaymentPage;\n\nimport React, { useState, useEffect } from 'react';\nimport './Payment.css';\nconst baseUrl = process.env.REACT_APP_BACKEND_URL;\n\nconst PaymentPage = () => {\n  const [selectedPlan, setSelectedPlan] = useState(null);\n  const [paypalLoaded, setPaypalLoaded] = useState(false);\n\n  // State to store selected plan details\n  const [selectedPlanDetails, setSelectedPlanDetails] = useState({\n    name: '',\n    price: ''\n  });\n\n  // Define PayPal plan IDs\n  const plans = [\n    { name: 'Pro', price: '16.58', storage: '100GB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n    { name: 'Ultra', price: '24.91', storage: '500GB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n    { name: 'Promax', price: '31.58', storage: '1TB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n  ];\n\n  useEffect(() => {\n    // Load PayPal SDK script dynamically\n    const script = document.createElement('script');\n    script.src = 'https://www.paypal.com/sdk/js?client-id=ARuLPQZ6fA9iKKCu-YyCrFX5OpGJj92bvhHXLFIADCr6q3IU9MM6ILvYhhyYlrJuuZZa5MDm3JRIlt5R&vault=true&intent=subscription';\n    script.async = true;\n    script.onload = () => setPaypalLoaded(true);\n    document.body.appendChild(script);\n\n    return () => {\n      document.body.removeChild(script); // Clean up script on component unmount\n    };\n  }, []);\n\n  const renderPayPalButton = (planId) => {\n    if (!paypalLoaded) return;\n\n    // Remove previous PayPal button if exists\n    const previousButton = document.getElementById('paypal-button-container');\n    if (previousButton) {\n      previousButton.innerHTML = '';\n    }\n\n    window.paypal.Buttons({\n      style: {\n        shape: 'pill',\n        color: 'silver',\n        layout: 'horizontal',\n        label: 'subscribe'\n      },\n      createSubscription: function (data, actions) {\n        return actions.subscription.create({\n          plan_id: planId // Use the selected plan ID\n        });\n      },\n      onApprove: function (data, actions) {\n        const subscriptionID = data.subscriptionID;\n        alert('Subscription created successfully! Subscription ID: ' + subscriptionID);\n\n        // Set subscription status to 'true' after successful payment\n        sessionStorage.setItem('subscriptionID', subscriptionID);\n        sessionStorage.setItem('isSubscribed', 'true');\n\n        // Send subscription details to the backend\n        fetch(`${baseUrl}/api/payments/complete-subscription`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            subscriptionID,\n            planId: selectedPlan,\n            planName: selectedPlanDetails.name,\n            planPrice: selectedPlanDetails.price,\n          }),\n        })\n        .then(response => response.json())\n        .then(data => console.log('Backend response:', data))\n        .catch(error => console.error('Error sending subscription details:', error));\n      },\n      onError: function (err) {\n        console.error('PayPal Error:', err);\n      }\n    }).render('#paypal-button-container'); // Render PayPal button in the container\n  };\n\n  const handleSelectPlan = (plan) => {\n    setSelectedPlan(plan.planId);\n    setSelectedPlanDetails({\n      name: plan.name,\n      price: plan.price\n    });\n    console.log(`Selected plan ID: ${plan.planId}`); // Debugging statement\n\n    // Automatically render and open the PayPal subscription modal\n    renderPayPalButton(plan.planId);\n    document.getElementById('paypal-button-container').scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <div className=\"payment-page\">\n      <h2>Select a Plan</h2>\n      <div className=\"plans-container\">\n        {plans.map((plan, index) => (\n          <div className=\"plan-card\" key={index}>\n            <h3>{plan.name}</h3>\n            <p>${plan.price} per month</p>\n            <p>{plan.storage} Storage</p>\n            <button onClick={() => handleSelectPlan(plan)}>\n              Select {plan.name}\n            </button>\n          </div>\n        ))}\n      </div>\n\n      {/* Display selected plan details */}\n      {selectedPlan && (\n        <div className=\"selected-plan-details\">\n          <h3>Selected Plan</h3>\n          <p><strong>Name:</strong> {selectedPlanDetails.name}</p>\n          <p><strong>Price:</strong> ${selectedPlanDetails.price}</p>\n        </div>\n      )}\n\n      {/* PayPal button container */}\n      <div id=\"paypal-button-container\"></div>\n    </div>\n  );\n};\n\nexport default PaymentPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}