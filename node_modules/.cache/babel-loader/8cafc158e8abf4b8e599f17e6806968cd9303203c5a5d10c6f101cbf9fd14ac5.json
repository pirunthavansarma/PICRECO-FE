{"ast":null,"code":"// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import axios from 'axios';\n// import './Eventpage.css'; // Updated path\n\n// const EventPage = () => {\n//   const [isEventSetup, setIsEventSetup] = useState(false);\n//   const [formData, setFormData] = useState({ eventId: '' });\n//   const [errors, setErrors] = useState({});\n//   const [responseMsg, setResponseMsg] = useState('');\n//   const navigate = useNavigate();\n\n//   const handleToggle = () => {\n//     setIsEventSetup(!isEventSetup);\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const validateFindEvent = () => {\n//     let tempErrors = {};\n//     if (!formData.eventId) tempErrors.eventId = \"Event ID is required\";\n//     return tempErrors;\n//   };\n\n//   const handleFindEventSubmit = async (e) => {\n//     e.preventDefault();\n//     const validationErrors = validateFindEvent();\n//     if (Object.keys(validationErrors).length === 0) {\n//       try {\n//         const response = await axios.post('http://localhost:5001/api/events/find-event', {\n//           eventId: formData.eventId\n//         });\n//         setResponseMsg(response.data.message);\n//       } catch (error) {\n//         if (error.response) {\n//           setErrors({ api: error.response.data.message });\n//         }\n//       }\n//     } else {\n//       setErrors(validationErrors);\n//     }\n//   };\n\n//   const goToDashboard = () => {\n//     navigate('/Payment');\n//   };\n\n//   return (\n//     <div className={`eventcontain ${isEventSetup ? 'active' : ''}`} id=\"container\">\n//       <div className=\"form-container event-setup\">\n//         <form\n//           id=\"event-setup-form\"\n//           className=\"p-4\"\n//           onSubmit={isEventSetup ? goToDashboard : handleFindEventSubmit}\n//         >\n//           <h1 className=\"mb-4\">{isEventSetup ? 'Dashboard' : 'Find My Photo'}</h1>\n//           <p className=\"mb-4\">{isEventSetup ? 'Go to your dashboard' : 'Enter the event ID'}</p>\n//           {isEventSetup ? (\n//             <button type=\"button\" className=\"btn btn-primary\" onClick={goToDashboard}>\n//               Dashboard\n//             </button>\n//           ) : (\n//             <>\n//               <input\n//                 type=\"text\"\n//                 name=\"eventId\"\n//                 className=\"form-control mb-3\"\n//                 placeholder=\"Event ID\"\n//                 value={formData.eventId}\n//                 onChange={handleChange}\n//               />\n//               {errors.eventId && <div className=\"text-danger\">{errors.eventId}</div>}\n//               <button type=\"submit\" className=\"btn btn-primary\">Find Event</button>\n//             </>\n//           )}\n//           {errors.api && <div className=\"text-danger\">{errors.api}</div>}\n//           {responseMsg && <div className=\"text-success\">{responseMsg}</div>}\n//         </form>\n//       </div>\n\n//       <div className=\"toggle-container\">\n//         <div className=\"toggle\">\n//           <div className=\"toggle-panel toggle-left\">\n//             <h1>Already Have an Event?</h1>\n//             <p>Enter the event ID to Find the photo</p>\n//             <button className=\"btn btn-secondary\" id=\"enter-event\" onClick={handleToggle}>\n//               {isEventSetup ? 'Find My Photo' : 'Dashboard'}\n//             </button>\n//           </div>\n//           <div className=\"toggle-panel toggle-right\">\n//             <h1>Organizing an Event?</h1>\n//             <p>Go to your dashboard</p>\n//             <button className=\"btn btn-secondary\" id=\"setup-event\" onClick={handleToggle}>\n//               {isEventSetup ? 'Dashboard' : 'Create Event'}\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default EventPage;","map":{"version":3,"names":[],"sources":["/home/krish/Documents/project/picrego main/picrego/Frontend/src/Components/EventManagement/Eventpage.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import axios from 'axios';\n// import './Eventpage.css'; // Updated path\n\n// const EventPage = () => {\n//   const [isEventSetup, setIsEventSetup] = useState(false);\n//   const [formData, setFormData] = useState({ eventId: '' });\n//   const [errors, setErrors] = useState({});\n//   const [responseMsg, setResponseMsg] = useState('');\n//   const navigate = useNavigate();\n\n//   const handleToggle = () => {\n//     setIsEventSetup(!isEventSetup);\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const validateFindEvent = () => {\n//     let tempErrors = {};\n//     if (!formData.eventId) tempErrors.eventId = \"Event ID is required\";\n//     return tempErrors;\n//   };\n\n//   const handleFindEventSubmit = async (e) => {\n//     e.preventDefault();\n//     const validationErrors = validateFindEvent();\n//     if (Object.keys(validationErrors).length === 0) {\n//       try {\n//         const response = await axios.post('http://localhost:5001/api/events/find-event', {\n//           eventId: formData.eventId\n//         });\n//         setResponseMsg(response.data.message);\n//       } catch (error) {\n//         if (error.response) {\n//           setErrors({ api: error.response.data.message });\n//         }\n//       }\n//     } else {\n//       setErrors(validationErrors);\n//     }\n//   };\n\n//   const goToDashboard = () => {\n//     navigate('/Payment');\n//   };\n\n//   return (\n//     <div className={`eventcontain ${isEventSetup ? 'active' : ''}`} id=\"container\">\n//       <div className=\"form-container event-setup\">\n//         <form\n//           id=\"event-setup-form\"\n//           className=\"p-4\"\n//           onSubmit={isEventSetup ? goToDashboard : handleFindEventSubmit}\n//         >\n//           <h1 className=\"mb-4\">{isEventSetup ? 'Dashboard' : 'Find My Photo'}</h1>\n//           <p className=\"mb-4\">{isEventSetup ? 'Go to your dashboard' : 'Enter the event ID'}</p>\n//           {isEventSetup ? (\n//             <button type=\"button\" className=\"btn btn-primary\" onClick={goToDashboard}>\n//               Dashboard\n//             </button>\n//           ) : (\n//             <>\n//               <input\n//                 type=\"text\"\n//                 name=\"eventId\"\n//                 className=\"form-control mb-3\"\n//                 placeholder=\"Event ID\"\n//                 value={formData.eventId}\n//                 onChange={handleChange}\n//               />\n//               {errors.eventId && <div className=\"text-danger\">{errors.eventId}</div>}\n//               <button type=\"submit\" className=\"btn btn-primary\">Find Event</button>\n//             </>\n//           )}\n//           {errors.api && <div className=\"text-danger\">{errors.api}</div>}\n//           {responseMsg && <div className=\"text-success\">{responseMsg}</div>}\n//         </form>\n//       </div>\n\n//       <div className=\"toggle-container\">\n//         <div className=\"toggle\">\n//           <div className=\"toggle-panel toggle-left\">\n//             <h1>Already Have an Event?</h1>\n//             <p>Enter the event ID to Find the photo</p>\n//             <button className=\"btn btn-secondary\" id=\"enter-event\" onClick={handleToggle}>\n//               {isEventSetup ? 'Find My Photo' : 'Dashboard'}\n//             </button>\n//           </div>\n//           <div className=\"toggle-panel toggle-right\">\n//             <h1>Organizing an Event?</h1>\n//             <p>Go to your dashboard</p>\n//             <button className=\"btn btn-secondary\" id=\"setup-event\" onClick={handleToggle}>\n//               {isEventSetup ? 'Dashboard' : 'Create Event'}\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default EventPage;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}