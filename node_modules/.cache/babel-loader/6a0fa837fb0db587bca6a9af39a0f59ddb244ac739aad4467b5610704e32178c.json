{"ast":null,"code":"// import React, { useState } from 'react';\n// import { uploadImages } from '../../util/uploadImages';\n// import { toast } from 'react-toastify';\n\n// const PhotoUpload = () => {\n//   const [selectedImages, setSelectedImages] = useState([]);\n//   const [name, setName] = useState('');\n//   const [eventName, setEventName] = useState('');\n\n//   const handleImageChange = (event) => {\n//     if (event.target.files) {\n//       setSelectedImages([...event.target.files]);\n//     }\n//   };\n\n//   const handleNameChange = (event) => {\n//     setName(event.target.value);\n//   };\n\n//   const handleEventNameChange = (event) => {\n//     setEventName(event.target.value);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     if (selectedImages.length === 0) {\n//       toast.error(\"No images selected\");\n//       return;\n//     }\n\n//     if (!name || !eventName) {\n//       toast.error(\"Name and Event Name are required\");\n//       return;\n//     }\n\n//     try {\n//       const imageUrls = await uploadImages(selectedImages, name, eventName);  // Passing name and eventName\n//       if (imageUrls.length > 0) {\n//         toast.success(\"Images uploaded successfully\");\n//         console.log(\"Uploaded image URLs:\", imageUrls);\n//         console.log(\"Name:\", name);\n//         console.log(\"Event Name:\", eventName);\n//       } else {\n//         toast.error(\"Failed to upload images\");\n//       }\n//     } catch (error) {\n//       toast.error(\"An error occurred while uploading images\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"photo-upload-container\">\n//       <h1>Create New Event & Upload Photos</h1>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label htmlFor=\"name\">Name:</label>\n//           <input \n//             type=\"text\" \n//             id=\"name\" \n//             value={name} \n//             onChange={handleNameChange} \n//             placeholder=\"Enter your name\" \n//           />\n//         </div>\n//         <div>\n//           <label htmlFor=\"eventName\">Event Name:</label>\n//           <input \n//             type=\"text\" \n//             id=\"eventName\" \n//             value={eventName} \n//             onChange={handleEventNameChange} \n//             placeholder=\"Enter the event name\" \n//           />\n//         </div>\n//         <div>\n//           <input \n//             type=\"file\" \n//             multiple \n//             accept=\"image/*\" \n//             onChange={handleImageChange} \n//           />\n//         </div>\n//         <button type=\"submit\">Upload Images</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default PhotoUpload;","map":{"version":3,"names":[],"sources":["/home/krish/Documents/project/picrego main/picrego/Frontend/src/Components/EventManagement/photoUpload.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { uploadImages } from '../../util/uploadImages';\n// import { toast } from 'react-toastify';\n\n// const PhotoUpload = () => {\n//   const [selectedImages, setSelectedImages] = useState([]);\n//   const [name, setName] = useState('');\n//   const [eventName, setEventName] = useState('');\n\n//   const handleImageChange = (event) => {\n//     if (event.target.files) {\n//       setSelectedImages([...event.target.files]);\n//     }\n//   };\n\n//   const handleNameChange = (event) => {\n//     setName(event.target.value);\n//   };\n\n//   const handleEventNameChange = (event) => {\n//     setEventName(event.target.value);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     if (selectedImages.length === 0) {\n//       toast.error(\"No images selected\");\n//       return;\n//     }\n\n//     if (!name || !eventName) {\n//       toast.error(\"Name and Event Name are required\");\n//       return;\n//     }\n\n//     try {\n//       const imageUrls = await uploadImages(selectedImages, name, eventName);  // Passing name and eventName\n//       if (imageUrls.length > 0) {\n//         toast.success(\"Images uploaded successfully\");\n//         console.log(\"Uploaded image URLs:\", imageUrls);\n//         console.log(\"Name:\", name);\n//         console.log(\"Event Name:\", eventName);\n//       } else {\n//         toast.error(\"Failed to upload images\");\n//       }\n//     } catch (error) {\n//       toast.error(\"An error occurred while uploading images\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"photo-upload-container\">\n//       <h1>Create New Event & Upload Photos</h1>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label htmlFor=\"name\">Name:</label>\n//           <input \n//             type=\"text\" \n//             id=\"name\" \n//             value={name} \n//             onChange={handleNameChange} \n//             placeholder=\"Enter your name\" \n//           />\n//         </div>\n//         <div>\n//           <label htmlFor=\"eventName\">Event Name:</label>\n//           <input \n//             type=\"text\" \n//             id=\"eventName\" \n//             value={eventName} \n//             onChange={handleEventNameChange} \n//             placeholder=\"Enter the event name\" \n//           />\n//         </div>\n//         <div>\n//           <input \n//             type=\"file\" \n//             multiple \n//             accept=\"image/*\" \n//             onChange={handleImageChange} \n//           />\n//         </div>\n//         <button type=\"submit\">Upload Images</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default PhotoUpload;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}