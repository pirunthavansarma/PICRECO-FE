{"ast":null,"code":"var _jsxFileName = \"/home/krish/Documents/project/picrego photoupload/picrego/Frontend/src/Components/Payment/Payment.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './Payment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaymentPage = () => {\n  _s();\n  const [selectedPlan, setSelectedPlan] = useState(null); // State to store the selected plan\n  const [loading, setLoading] = useState(false); // Loading state while processing the payment\n  const [error, setError] = useState(null); // State to store any errors\n\n  const plans = [{\n    name: 'Pro',\n    price: '16.58',\n    storage: '100GB',\n    planId: process.env.REACT_APP_PAYPAL_PLAN_ID_PRO // Use environment variable\n  }, {\n    name: 'Ultra',\n    price: '24.91',\n    storage: '500GB',\n    planId: process.env.REACT_APP_PAYPAL_PLAN_ID_ULTRA // Use environment variable\n  }, {\n    name: 'Promax',\n    price: '31.58',\n    storage: '1TB',\n    planId: process.env.REACT_APP_PAYPAL_PLAN_ID_PROMAX // Use environment variable\n  }];\n  const handleSelectPlan = planId => {\n    setSelectedPlan(planId); // Set the selected plan when user clicks on a plan\n  };\n  const handlePayment = async () => {\n    if (!selectedPlan) {\n      alert('Please select a plan first!');\n      return;\n    }\n    try {\n      setLoading(true); // Show loading while processing payment\n      setError(null); // Clear any previous errors\n\n      // Send request to your server to create a PayPal order or subscription\n      const token = localStorage.getItem('authToken'); // Retrieve token from localStorage\n      const response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/api/payments/create-subscription`,\n      // Use environment variable\n      {\n        planId: selectedPlan\n      },\n      // Send selected plan to backend\n      {\n        headers: {\n          Authorization: `Bearer ${token}` // Include authorization token in headers\n        }\n      });\n\n      // Redirect the user to PayPal approval URL\n      const approvalUrl = response.data.approvalUrl; // Extract PayPal approval URL from the response\n      window.location.href = approvalUrl; // Redirect to PayPal page\n    } catch (error) {\n      console.error('Error during payment:', error);\n      setError('Failed to create the payment. Please try again.');\n    } finally {\n      setLoading(false); // Stop loading once the process is complete\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Select a Plan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"plans-container\",\n      children: plans.map((plan, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plan-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: plan.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", plan.price, \" per month\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [plan.storage, \" Storage\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelectPlan(plan.planId),\n          children: [\"Select \", plan.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePayment,\n      disabled: !selectedPlan || loading // Disable button if no plan is selected or if loading\n      ,\n      children: loading ? 'Processing...' : 'Proceed to PayPal'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentPage, \"z3/Iz3ZGuzlNdMJYovMCzSxP0gE=\");\n_c = PaymentPage;\nexport default PaymentPage;\nvar _c;\n$RefreshReg$(_c, \"PaymentPage\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","PaymentPage","_s","selectedPlan","setSelectedPlan","loading","setLoading","error","setError","plans","name","price","storage","planId","process","env","REACT_APP_PAYPAL_PLAN_ID_PRO","REACT_APP_PAYPAL_PLAN_ID_ULTRA","REACT_APP_PAYPAL_PLAN_ID_PROMAX","handleSelectPlan","handlePayment","alert","token","localStorage","getItem","response","post","REACT_APP_BACKEND_URL","headers","Authorization","approvalUrl","data","window","location","href","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","plan","index","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/krish/Documents/project/picrego photoupload/picrego/Frontend/src/Components/Payment/Payment.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './Payment.css';\n\nconst PaymentPage = () => {\n  const [selectedPlan, setSelectedPlan] = useState(null); // State to store the selected plan\n  const [loading, setLoading] = useState(false); // Loading state while processing the payment\n  const [error, setError] = useState(null); // State to store any errors\n\n  const plans = [\n    {\n      name: 'Pro',\n      price: '16.58',\n      storage: '100GB',\n      planId: process.env.REACT_APP_PAYPAL_PLAN_ID_PRO, // Use environment variable\n    },\n    {\n      name: 'Ultra',\n      price: '24.91',\n      storage: '500GB',\n      planId: process.env.REACT_APP_PAYPAL_PLAN_ID_ULTRA, // Use environment variable\n    },\n    {\n      name: 'Promax',\n      price: '31.58',\n      storage: '1TB',\n      planId: process.env.REACT_APP_PAYPAL_PLAN_ID_PROMAX, // Use environment variable\n    },\n  ];\n\n  const handleSelectPlan = (planId) => {\n    setSelectedPlan(planId); // Set the selected plan when user clicks on a plan\n  };\n\n  const handlePayment = async () => {\n    if (!selectedPlan) {\n      alert('Please select a plan first!');\n      return;\n    }\n\n    try {\n      setLoading(true); // Show loading while processing payment\n      setError(null); // Clear any previous errors\n\n      // Send request to your server to create a PayPal order or subscription\n      const token = localStorage.getItem('authToken'); // Retrieve token from localStorage\n      const response = await axios.post(\n        `${process.env.REACT_APP_BACKEND_URL}/api/payments/create-subscription`, // Use environment variable\n        { planId: selectedPlan }, // Send selected plan to backend\n        {\n          headers: {\n            Authorization: `Bearer ${token}`, // Include authorization token in headers\n          },\n        }\n      );\n\n      // Redirect the user to PayPal approval URL\n      const approvalUrl = response.data.approvalUrl; // Extract PayPal approval URL from the response\n      window.location.href = approvalUrl; // Redirect to PayPal page\n    } catch (error) {\n      console.error('Error during payment:', error);\n      setError('Failed to create the payment. Please try again.');\n    } finally {\n      setLoading(false); // Stop loading once the process is complete\n    }\n  };\n\n  return (\n    <div className=\"payment-page\">\n      <h2>Select a Plan</h2>\n      <div className=\"plans-container\">\n        {plans.map((plan, index) => (\n          <div className=\"plan-card\" key={index}>\n            <h3>{plan.name}</h3>\n            <p>${plan.price} per month</p>\n            <p>{plan.storage} Storage</p>\n            <button onClick={() => handleSelectPlan(plan.planId)}>\n              Select {plan.name}\n            </button>\n          </div>\n        ))}\n      </div>\n\n      {error && <p className=\"error-message\">{error}</p>}\n\n      <button\n        onClick={handlePayment}\n        disabled={!selectedPlan || loading} // Disable button if no plan is selected or if loading\n      >\n        {loading ? 'Processing...' : 'Proceed to PayPal'}\n      </button>\n    </div>\n  );\n};\n\nexport default PaymentPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}