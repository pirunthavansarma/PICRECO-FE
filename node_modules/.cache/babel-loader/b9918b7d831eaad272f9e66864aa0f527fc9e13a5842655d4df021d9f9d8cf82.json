{"ast":null,"code":"var _jsxFileName = \"/home/krish/Documents/project/picrego photoupload/picrego/Frontend/src/Components/Dashboards/AdminDashboard.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const AdminDashboard = () => {\n//   const navigate = useNavigate();\n\n//   const handleLogout = () => {\n//     sessionStorage.removeItem('authToken');\n//     sessionStorage.removeItem('userRole');\n//     navigate('/auth'); // Redirect to login page\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h1>Admin Dashboard</h1>\n//       <button className=\"btn btn-dark\" onClick={handleLogout}>Logout</button>\n//     </div>\n//   );\n// };\n\n// export default AdminDashboard;\n\nimport React, { useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminDashboard = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  useEffect(() => {\n    const authToken = sessionStorage.getItem('authToken');\n    const userRole = sessionStorage.getItem('userRole');\n    if (!authToken || userRole !== 'admin') {\n      // If no token or user role is not admin, redirect to login page\n      navigate('/auth');\n    } else if (location.state === null && location.pathname === '/admin-dashboard') {\n      // If user tries to access admin dashboard page directly by changing URL, redirect to login page\n      navigate('/auth');\n    }\n  }, [navigate, location]);\n  const handleLogout = () => {\n    sessionStorage.removeItem('authToken');\n    sessionStorage.removeItem('userRole');\n    navigate('/auth'); // Redirect to login page\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Admin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-dark\",\n      onClick: handleLogout,\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminDashboard, \"gMsdikdDs1f1NUVrv3Ag60oK04k=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useEffect","useNavigate","useLocation","jsxDEV","_jsxDEV","AdminDashboard","_s","navigate","location","authToken","sessionStorage","getItem","userRole","state","pathname","handleLogout","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/krish/Documents/project/picrego photoupload/picrego/Frontend/src/Components/Dashboards/AdminDashboard.js"],"sourcesContent":["// import React from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const AdminDashboard = () => {\n//   const navigate = useNavigate();\n\n//   const handleLogout = () => {\n//     sessionStorage.removeItem('authToken');\n//     sessionStorage.removeItem('userRole');\n//     navigate('/auth'); // Redirect to login page\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h1>Admin Dashboard</h1>\n//       <button className=\"btn btn-dark\" onClick={handleLogout}>Logout</button>\n//     </div>\n//   );\n// };\n\n// export default AdminDashboard;\n\nimport React, { useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nconst AdminDashboard = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    const authToken = sessionStorage.getItem('authToken');\n    const userRole = sessionStorage.getItem('userRole');\n\n    if (!authToken || userRole !== 'admin') {\n      // If no token or user role is not admin, redirect to login page\n      navigate('/auth');\n    } else if (location.state === null && location.pathname === '/admin-dashboard') {\n      // If user tries to access admin dashboard page directly by changing URL, redirect to login page\n      navigate('/auth');\n    }\n  }, [navigate, location]);\n\n  const handleLogout = () => {\n    sessionStorage.removeItem('authToken');\n    sessionStorage.removeItem('userRole');\n    navigate('/auth'); // Redirect to login page\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Admin Dashboard</h1>\n      <button className=\"btn btn-dark\" onClick={handleLogout}>Logout</button>\n    </div>\n  );\n};\n\nexport default AdminDashboard;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAGC,cAAc,CAACC,OAAO,CAAC,WAAW,CAAC;IACrD,MAAMC,QAAQ,GAAGF,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC;IAEnD,IAAI,CAACF,SAAS,IAAIG,QAAQ,KAAK,OAAO,EAAE;MACtC;MACAL,QAAQ,CAAC,OAAO,CAAC;IACnB,CAAC,MAAM,IAAIC,QAAQ,CAACK,KAAK,KAAK,IAAI,IAAIL,QAAQ,CAACM,QAAQ,KAAK,kBAAkB,EAAE;MAC9E;MACAP,QAAQ,CAAC,OAAO,CAAC;IACnB;EACF,CAAC,EAAE,CAACA,QAAQ,EAAEC,QAAQ,CAAC,CAAC;EAExB,MAAMO,YAAY,GAAGA,CAAA,KAAM;IACzBL,cAAc,CAACM,UAAU,CAAC,WAAW,CAAC;IACtCN,cAAc,CAACM,UAAU,CAAC,UAAU,CAAC;IACrCT,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EACrB,CAAC;EAED,oBACEH,OAAA;IAAKa,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBd,OAAA;MAAAc,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBlB,OAAA;MAAQa,SAAS,EAAC,cAAc;MAACM,OAAO,EAAER,YAAa;MAAAG,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpE,CAAC;AAEV,CAAC;AAAChB,EAAA,CA7BID,cAAc;EAAA,QACDJ,WAAW,EACXC,WAAW;AAAA;AAAAsB,EAAA,GAFxBnB,cAAc;AA+BpB,eAAeA,cAAc;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}