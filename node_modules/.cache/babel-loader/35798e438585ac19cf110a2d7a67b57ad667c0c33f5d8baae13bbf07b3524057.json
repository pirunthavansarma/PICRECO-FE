{"ast":null,"code":"var _jsxFileName = \"/home/krish/Documents/project/picrego main/picrego/Frontend/src/Components/Payment/Payment.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './Payment.css';\n// const baseUrl = process.env.REACT_APP_BACKEND_URL;\n\n// const PaymentPage = () => {\n//   const [selectedPlan, setSelectedPlan] = useState(null);\n//   const [paypalLoaded, setPaypalLoaded] = useState(false);\n\n//   // State to store selected plan details\n//   const [selectedPlanDetails, setSelectedPlanDetails] = useState({\n//     name: '',\n//     price: ''\n//   });\n\n//   // Define PayPal plan IDs\n//   const plans = [\n//     { name: 'Pro', price: '16.58', storage: '100GB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n//     { name: 'Ultra', price: '24.91', storage: '500GB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n//     { name: 'Promax', price: '31.58', storage: '1TB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n//   ];\n\n//   useEffect(() => {\n//     // Load PayPal SDK script dynamically\n//     const script = document.createElement('script');\n//     script.src = 'https://www.paypal.com/sdk/js?client-id=ARuLPQZ6fA9iKKCu-YyCrFX5OpGJj92bvhHXLFIADCr6q3IU9MM6ILvYhhyYlrJuuZZa5MDm3JRIlt5R&vault=true&intent=subscription';\n//     script.async = true;\n//     script.onload = () => setPaypalLoaded(true);\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script on component unmount\n//     };\n//   }, []);\n\n//   const renderPayPalButton = (planId) => {\n//     if (!paypalLoaded) return;\n\n//     // Remove previous PayPal button if exists\n//     const previousButton = document.getElementById('paypal-button-container');\n//     if (previousButton) {\n//       previousButton.innerHTML = '';\n//     }\n\n//     window.paypal.Buttons({\n//       style: {\n//         shape: 'pill',\n//         color: 'silver',\n//         layout: 'horizontal',\n//         label: 'subscribe'\n//       },\n//       createSubscription: function (data, actions) {\n//         return actions.subscription.create({\n//           plan_id: planId // Use the selected plan ID\n//         });\n//       },\n//       onApprove: function (data, actions) {\n//         const subscriptionID = data.subscriptionID;\n//         alert('Subscription created successfully! Subscription ID: ' + subscriptionID);\n\n//         // Set subscription status to 'true' after successful payment\n//         const token = sessionStorage.getItem('authToken'); // Assuming the token is saved in sessionStorage\n//         sessionStorage.setItem('subscriptionID', subscriptionID);\n//         sessionStorage.setItem('isSubscribed', 'true');\n//         console.log(subscriptionID); // Now it's safe to use\n\n//         // const subscriptionID = sessionStorage.getItem('subscriptionID'); // Assuming the token is saved in sessionStorage\n\n//         // Send subscription details to the backend\n//         fetch(`${baseUrl}/api/payments/create-subscription`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`,\n//           },\n//           body: JSON.stringify({\n//             subscriptionID,\n//             planId: selectedPlan,\n//             planName: selectedPlanDetails.name,\n//             planPrice: selectedPlanDetails.price,\n//           }),\n//         })\n//         .then(response => response.json())\n//         .then(data => console.log('Backend response:', data))\n//         .catch(error => console.error('Error sending subscription details:', error));\n//       },\n//       onError: function (err) {\n//         console.error('PayPal Error:', err);\n//       }\n//     }).render('#paypal-button-container'); // Render PayPal button in the container\n//   };\n\n//   const handleSelectPlan = (plan) => {\n//     setSelectedPlan(plan.planId);\n//     setSelectedPlanDetails({\n//       name: plan.name,\n//       price: plan.price\n//     });\n//     console.log(`Selected plan ID: ${plan.planId}`); // Debugging statement\n\n//     // Automatically render and open the PayPal subscription modal\n//     renderPayPalButton(plan.planId);\n//     document.getElementById('paypal-button-container').scrollIntoView({ behavior: 'smooth' });\n//   };\n\n//   return (\n//     <div className=\"payment-page\">\n//       <h2>Select a Plan</h2>\n//       <div className=\"plans-container\">\n//         {plans.map((plan, index) => (\n//           <div className=\"plan-card\" key={index}>\n//             <h3>{plan.name}</h3>\n//             <p>${plan.price} per month</p>\n//             <p>{plan.storage} Storage</p>\n//             <button onClick={() => handleSelectPlan(plan)}>\n//               Select {plan.name}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Display selected plan details */}\n//       {selectedPlan && (\n//         <div className=\"selected-plan-details\">\n//           <h3>Selected Plan</h3>\n//           <p><strong>Name:</strong> {selectedPlanDetails.name}</p>\n//           <p><strong>Price:</strong> ${selectedPlanDetails.price}</p>\n//         </div>\n//       )}\n\n//       {/* PayPal button container */}\n//       <div id=\"paypal-button-container\"></div>\n//     </div>\n//   );\n// };\n\n// export default PaymentPage;\n\n// import React, { useState, useEffect } from 'react';\n// import './Payment.css';\n// const baseUrl = process.env.REACT_APP_BACKEND_URL;\n\n// const PaymentPage = () => {\n//   const [selectedPlan, setSelectedPlan] = useState(null);\n//   const [paypalLoaded, setPaypalLoaded] = useState(false);\n\n//   // State to store selected plan details\n//   const [selectedPlanDetails, setSelectedPlanDetails] = useState({\n//     name: '',\n//     price: ''\n//   });\n\n//   // Define PayPal plan IDs\n//   const plans = [\n//     { name: 'Pro', price: '16.58', storage: '100GB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n//     { name: 'Ultra', price: '24.91', storage: '500GB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n//     { name: 'Promax', price: '31.58', storage: '1TB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n//   ];\n\n//   useEffect(() => {\n//     // Load PayPal SDK script dynamically\n//     const script = document.createElement('script');\n//     script.src = 'https://www.paypal.com/sdk/js?client-id=ARuLPQZ6fA9iKKCu-YyCrFX5OpGJj92bvhHXLFIADCr6q3IU9MM6ILvYhhyYlrJuuZZa5MDm3JRIlt5R&vault=true&intent=subscription';\n//     script.async = true;\n//     script.onload = () => setPaypalLoaded(true);\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script on component unmount\n//     };\n//   }, []);\n\n//   const renderPayPalButton = (planId) => {\n//     if (!paypalLoaded) return;\n\n//     // Remove previous PayPal button if exists\n//     const previousButton = document.getElementById('paypal-button-container');\n//     if (previousButton) {\n//       previousButton.innerHTML = '';\n//     }\n\n//     window.paypal.Buttons({\n//       style: {\n//         shape: 'pill',\n//         color: 'silver',\n//         layout: 'horizontal',\n//         label: 'subscribe'\n//       },\n//       createSubscription: function (data, actions) {\n//         return actions.subscription.create({\n//           plan_id: planId // Use the selected plan ID\n//         });\n//       },\n//       onApprove: function (data, actions) {\n//         const subscriptionID = data.subscriptionID;\n//         alert('Subscription created successfully! Subscription ID: ' + subscriptionID);\n\n//         // Save subscription details in sessionStorage\n//         sessionStorage.setItem('subscriptionID', subscriptionID);\n//         sessionStorage.setItem('isSubscribed', 'true');\n\n//         const token = sessionStorage.getItem('authToken'); // Retrieve authToken from sessionStorage\n\n//         // Send subscription details to the backend\n//         fetch(`${baseUrl}/api/payments/create-subscription`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`,\n//           },\n//           body: JSON.stringify({\n//             subscriptionID,\n//             planId: selectedPlan,\n//             planName: selectedPlanDetails.name,\n//             planPrice: selectedPlanDetails.price,\n//           }),\n//         })\n//           .then(response => response.json())\n//           .then(data => console.log('Backend response:', data))\n//           .catch(error => console.error('Error sending subscription details:', error));\n//       },\n//       onError: function (err) {\n//         console.error('PayPal Error:', err);\n//       }\n//     }).render('#paypal-button-container'); // Render PayPal button in the container\n//   };\n\n//   const handleSelectPlan = (plan) => {\n//     setSelectedPlan(plan.planId);\n//     setSelectedPlanDetails({\n//       name: plan.name,\n//       price: plan.price\n//     });\n\n//     // Automatically render and open the PayPal subscription modal\n//     renderPayPalButton(plan.planId);\n//     document.getElementById('paypal-button-container').scrollIntoView({ behavior: 'smooth' });\n//   };\n\n//   return (\n//     <div className=\"payment-page\">\n//       <h2>Select a Plan</h2>\n//       <div className=\"plans-container\">\n//         {plans.map((plan, index) => (\n//           <div className=\"plan-card\" key={index}>\n//             <h3>{plan.name}</h3>\n//             <p>${plan.price} per month</p>\n//             <p>{plan.storage} Storage</p>\n//             <button onClick={() => handleSelectPlan(plan)}>\n//               Select {plan.name}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Display selected plan details */}\n//       {selectedPlan && (\n//         <div className=\"selected-plan-details\">\n//           <h3>Selected Plan</h3>\n//           <p><strong>Name:</strong> {selectedPlanDetails.name}</p>\n//           <p><strong>Price:</strong> ${selectedPlanDetails.price}</p>\n//         </div>\n//       )}\n\n//       {/* PayPal button container */}\n//       <div id=\"paypal-button-container\"></div>\n//     </div>\n//   );\n// };\n\n// export default PaymentPage;\n\nimport React, { useState, useEffect } from 'react';\nimport './Payment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrl = process.env.REACT_APP_BACKEND_URL;\nconst PaymentPage = () => {\n  _s();\n  const [selectedPlan, setSelectedPlan] = useState(null);\n  const [paypalLoaded, setPaypalLoaded] = useState(false);\n  const [selectedPlanDetails, setSelectedPlanDetails] = useState({\n    name: '',\n    price: ''\n  });\n  const plans = [{\n    name: 'Pro',\n    price: '16.58',\n    storage: '100GB',\n    planId: 'P-0LX228426N2348600M3QPB3Q'\n  }, {\n    name: 'Ultra',\n    price: '24.91',\n    storage: '500GB',\n    planId: 'P-0LX228426N2348600M3QPB3Q'\n  }, {\n    name: 'Promax',\n    price: '31.58',\n    storage: '1TB',\n    planId: 'P-0LX228426N2348600M3QPB3Q'\n  }];\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = `https://www.paypal.com/sdk/js?client-id=${process.env.REACT_APP_PAYPAL_CLIENT_ID}&vault=true&intent=subscription`;\n    script.async = true;\n    script.onload = () => setPaypalLoaded(true);\n    document.body.appendChild(script);\n    return () => document.body.removeChild(script);\n  }, []);\n  const renderPayPalButton = async planId => {\n    if (!paypalLoaded) return;\n    const previousButton = document.getElementById('paypal-button-container');\n    if (previousButton) previousButton.innerHTML = '';\n    const token = sessionStorage.getItem('authToken');\n    const response = await fetch(`${baseUrl}/api/payments/create-subscription`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        planName: selectedPlanDetails.name,\n        planPrice: selectedPlanDetails.price,\n        userId: sessionStorage.getItem('userId')\n      })\n    });\n    const {\n      approvalUrl\n    } = await response.json();\n    window.paypal.Buttons({\n      createSubscription: function () {\n        return approvalUrl;\n      },\n      onApprove: function (data, actions) {\n        const subscriptionID = data.subscriptionID;\n        sessionStorage.setItem('subscriptionID', subscriptionID);\n        sessionStorage.setItem('isSubscribed', 'true');\n        fetch(`${baseUrl}/api/payments/complete-subscription?orderId=${subscriptionID}&userId=${sessionStorage.getItem('userId')}`).then(response => response.json()).then(data => console.log('Payment complete:', data)).catch(error => console.error('Error completing subscription:', error));\n      },\n      onError: function (err) {\n        console.error('PayPal Error:', err);\n      }\n    }).render('#paypal-button-container');\n  };\n  const handleSelectPlan = plan => {\n    setSelectedPlan(plan.planId);\n    setSelectedPlanDetails({\n      name: plan.name,\n      price: plan.price\n    });\n    renderPayPalButton(plan.planId);\n    document.getElementById('paypal-button-container').scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Select a Plan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"plans-container\",\n      children: plans.map((plan, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plan-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: plan.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", plan.price, \" per month\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [plan.storage, \" Storage\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelectPlan(plan),\n          children: [\"Select \", plan.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this), selectedPlan && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-plan-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Plan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 14\n        }, this), \" \", selectedPlanDetails.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Price:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 14\n        }, this), \" $\", selectedPlanDetails.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"paypal-button-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 351,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentPage, \"+vF4+Tk5RRHRTn9jOF+h3XdMjUI=\");\n_c = PaymentPage;\nexport default PaymentPage;\nvar _c;\n$RefreshReg$(_c, \"PaymentPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","baseUrl","process","env","REACT_APP_BACKEND_URL","PaymentPage","_s","selectedPlan","setSelectedPlan","paypalLoaded","setPaypalLoaded","selectedPlanDetails","setSelectedPlanDetails","name","price","plans","storage","planId","script","document","createElement","src","REACT_APP_PAYPAL_CLIENT_ID","async","onload","body","appendChild","removeChild","renderPayPalButton","previousButton","getElementById","innerHTML","token","sessionStorage","getItem","response","fetch","method","headers","JSON","stringify","planName","planPrice","userId","approvalUrl","json","window","paypal","Buttons","createSubscription","onApprove","data","actions","subscriptionID","setItem","then","console","log","catch","error","onError","err","render","handleSelectPlan","plan","scrollIntoView","behavior","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","id","_c","$RefreshReg$"],"sources":["/home/krish/Documents/project/picrego main/picrego/Frontend/src/Components/Payment/Payment.js"],"sourcesContent":["\n// import React, { useState, useEffect } from 'react';\n// import './Payment.css';\n// const baseUrl = process.env.REACT_APP_BACKEND_URL;\n\n// const PaymentPage = () => {\n//   const [selectedPlan, setSelectedPlan] = useState(null);\n//   const [paypalLoaded, setPaypalLoaded] = useState(false);\n\n//   // State to store selected plan details\n//   const [selectedPlanDetails, setSelectedPlanDetails] = useState({\n//     name: '',\n//     price: ''\n//   });\n\n//   // Define PayPal plan IDs\n//   const plans = [\n//     { name: 'Pro', price: '16.58', storage: '100GB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n//     { name: 'Ultra', price: '24.91', storage: '500GB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n//     { name: 'Promax', price: '31.58', storage: '1TB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n//   ];\n\n//   useEffect(() => {\n//     // Load PayPal SDK script dynamically\n//     const script = document.createElement('script');\n//     script.src = 'https://www.paypal.com/sdk/js?client-id=ARuLPQZ6fA9iKKCu-YyCrFX5OpGJj92bvhHXLFIADCr6q3IU9MM6ILvYhhyYlrJuuZZa5MDm3JRIlt5R&vault=true&intent=subscription';\n//     script.async = true;\n//     script.onload = () => setPaypalLoaded(true);\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script on component unmount\n//     };\n//   }, []);\n\n//   const renderPayPalButton = (planId) => {\n//     if (!paypalLoaded) return;\n\n//     // Remove previous PayPal button if exists\n//     const previousButton = document.getElementById('paypal-button-container');\n//     if (previousButton) {\n//       previousButton.innerHTML = '';\n//     }\n\n//     window.paypal.Buttons({\n//       style: {\n//         shape: 'pill',\n//         color: 'silver',\n//         layout: 'horizontal',\n//         label: 'subscribe'\n//       },\n//       createSubscription: function (data, actions) {\n//         return actions.subscription.create({\n//           plan_id: planId // Use the selected plan ID\n//         });\n//       },\n//       onApprove: function (data, actions) {\n//         const subscriptionID = data.subscriptionID;\n//         alert('Subscription created successfully! Subscription ID: ' + subscriptionID);\n\n//         // Set subscription status to 'true' after successful payment\n//         const token = sessionStorage.getItem('authToken'); // Assuming the token is saved in sessionStorage\n//         sessionStorage.setItem('subscriptionID', subscriptionID);\n//         sessionStorage.setItem('isSubscribed', 'true');\n//         console.log(subscriptionID); // Now it's safe to use\n\n//         // const subscriptionID = sessionStorage.getItem('subscriptionID'); // Assuming the token is saved in sessionStorage\n\n//         // Send subscription details to the backend\n//         fetch(`${baseUrl}/api/payments/create-subscription`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`,\n//           },\n//           body: JSON.stringify({\n//             subscriptionID,\n//             planId: selectedPlan,\n//             planName: selectedPlanDetails.name,\n//             planPrice: selectedPlanDetails.price,\n//           }),\n//         })\n//         .then(response => response.json())\n//         .then(data => console.log('Backend response:', data))\n//         .catch(error => console.error('Error sending subscription details:', error));\n//       },\n//       onError: function (err) {\n//         console.error('PayPal Error:', err);\n//       }\n//     }).render('#paypal-button-container'); // Render PayPal button in the container\n//   };\n\n//   const handleSelectPlan = (plan) => {\n//     setSelectedPlan(plan.planId);\n//     setSelectedPlanDetails({\n//       name: plan.name,\n//       price: plan.price\n//     });\n//     console.log(`Selected plan ID: ${plan.planId}`); // Debugging statement\n\n//     // Automatically render and open the PayPal subscription modal\n//     renderPayPalButton(plan.planId);\n//     document.getElementById('paypal-button-container').scrollIntoView({ behavior: 'smooth' });\n//   };\n\n//   return (\n//     <div className=\"payment-page\">\n//       <h2>Select a Plan</h2>\n//       <div className=\"plans-container\">\n//         {plans.map((plan, index) => (\n//           <div className=\"plan-card\" key={index}>\n//             <h3>{plan.name}</h3>\n//             <p>${plan.price} per month</p>\n//             <p>{plan.storage} Storage</p>\n//             <button onClick={() => handleSelectPlan(plan)}>\n//               Select {plan.name}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Display selected plan details */}\n//       {selectedPlan && (\n//         <div className=\"selected-plan-details\">\n//           <h3>Selected Plan</h3>\n//           <p><strong>Name:</strong> {selectedPlanDetails.name}</p>\n//           <p><strong>Price:</strong> ${selectedPlanDetails.price}</p>\n//         </div>\n//       )}\n\n//       {/* PayPal button container */}\n//       <div id=\"paypal-button-container\"></div>\n//     </div>\n//   );\n// };\n\n// export default PaymentPage;\n\n// import React, { useState, useEffect } from 'react';\n// import './Payment.css';\n// const baseUrl = process.env.REACT_APP_BACKEND_URL;\n\n// const PaymentPage = () => {\n//   const [selectedPlan, setSelectedPlan] = useState(null);\n//   const [paypalLoaded, setPaypalLoaded] = useState(false);\n\n//   // State to store selected plan details\n//   const [selectedPlanDetails, setSelectedPlanDetails] = useState({\n//     name: '',\n//     price: ''\n//   });\n\n//   // Define PayPal plan IDs\n//   const plans = [\n//     { name: 'Pro', price: '16.58', storage: '100GB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n//     { name: 'Ultra', price: '24.91', storage: '500GB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n//     { name: 'Promax', price: '31.58', storage: '1TB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n//   ];\n\n//   useEffect(() => {\n//     // Load PayPal SDK script dynamically\n//     const script = document.createElement('script');\n//     script.src = 'https://www.paypal.com/sdk/js?client-id=ARuLPQZ6fA9iKKCu-YyCrFX5OpGJj92bvhHXLFIADCr6q3IU9MM6ILvYhhyYlrJuuZZa5MDm3JRIlt5R&vault=true&intent=subscription';\n//     script.async = true;\n//     script.onload = () => setPaypalLoaded(true);\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script on component unmount\n//     };\n//   }, []);\n\n//   const renderPayPalButton = (planId) => {\n//     if (!paypalLoaded) return;\n\n//     // Remove previous PayPal button if exists\n//     const previousButton = document.getElementById('paypal-button-container');\n//     if (previousButton) {\n//       previousButton.innerHTML = '';\n//     }\n\n//     window.paypal.Buttons({\n//       style: {\n//         shape: 'pill',\n//         color: 'silver',\n//         layout: 'horizontal',\n//         label: 'subscribe'\n//       },\n//       createSubscription: function (data, actions) {\n//         return actions.subscription.create({\n//           plan_id: planId // Use the selected plan ID\n//         });\n//       },\n//       onApprove: function (data, actions) {\n//         const subscriptionID = data.subscriptionID;\n//         alert('Subscription created successfully! Subscription ID: ' + subscriptionID);\n\n//         // Save subscription details in sessionStorage\n//         sessionStorage.setItem('subscriptionID', subscriptionID);\n//         sessionStorage.setItem('isSubscribed', 'true');\n\n//         const token = sessionStorage.getItem('authToken'); // Retrieve authToken from sessionStorage\n\n//         // Send subscription details to the backend\n//         fetch(`${baseUrl}/api/payments/create-subscription`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`,\n//           },\n//           body: JSON.stringify({\n//             subscriptionID,\n//             planId: selectedPlan,\n//             planName: selectedPlanDetails.name,\n//             planPrice: selectedPlanDetails.price,\n//           }),\n//         })\n//           .then(response => response.json())\n//           .then(data => console.log('Backend response:', data))\n//           .catch(error => console.error('Error sending subscription details:', error));\n//       },\n//       onError: function (err) {\n//         console.error('PayPal Error:', err);\n//       }\n//     }).render('#paypal-button-container'); // Render PayPal button in the container\n//   };\n\n//   const handleSelectPlan = (plan) => {\n//     setSelectedPlan(plan.planId);\n//     setSelectedPlanDetails({\n//       name: plan.name,\n//       price: plan.price\n//     });\n\n//     // Automatically render and open the PayPal subscription modal\n//     renderPayPalButton(plan.planId);\n//     document.getElementById('paypal-button-container').scrollIntoView({ behavior: 'smooth' });\n//   };\n\n//   return (\n//     <div className=\"payment-page\">\n//       <h2>Select a Plan</h2>\n//       <div className=\"plans-container\">\n//         {plans.map((plan, index) => (\n//           <div className=\"plan-card\" key={index}>\n//             <h3>{plan.name}</h3>\n//             <p>${plan.price} per month</p>\n//             <p>{plan.storage} Storage</p>\n//             <button onClick={() => handleSelectPlan(plan)}>\n//               Select {plan.name}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Display selected plan details */}\n//       {selectedPlan && (\n//         <div className=\"selected-plan-details\">\n//           <h3>Selected Plan</h3>\n//           <p><strong>Name:</strong> {selectedPlanDetails.name}</p>\n//           <p><strong>Price:</strong> ${selectedPlanDetails.price}</p>\n//         </div>\n//       )}\n\n//       {/* PayPal button container */}\n//       <div id=\"paypal-button-container\"></div>\n//     </div>\n//   );\n// };\n\n// export default PaymentPage;\n\nimport React, { useState, useEffect } from 'react';\nimport './Payment.css';\nconst baseUrl = process.env.REACT_APP_BACKEND_URL;\n\nconst PaymentPage = () => {\n  const [selectedPlan, setSelectedPlan] = useState(null);\n  const [paypalLoaded, setPaypalLoaded] = useState(false);\n\n  const [selectedPlanDetails, setSelectedPlanDetails] = useState({\n    name: '',\n    price: ''\n  });\n\n  const plans = [\n    { name: 'Pro', price: '16.58', storage: '100GB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n    { name: 'Ultra', price: '24.91', storage: '500GB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n    { name: 'Promax', price: '31.58', storage: '1TB', planId: 'P-0LX228426N2348600M3QPB3Q' },\n  ];\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = `https://www.paypal.com/sdk/js?client-id=${process.env.REACT_APP_PAYPAL_CLIENT_ID}&vault=true&intent=subscription`;\n    script.async = true;\n    script.onload = () => setPaypalLoaded(true);\n    document.body.appendChild(script);\n    return () => document.body.removeChild(script);\n  }, []);\n\n  const renderPayPalButton = async (planId) => {\n    if (!paypalLoaded) return;\n\n    const previousButton = document.getElementById('paypal-button-container');\n    if (previousButton) previousButton.innerHTML = '';\n\n    const token = sessionStorage.getItem('authToken');\n    const response = await fetch(`${baseUrl}/api/payments/create-subscription`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n      },\n      body: JSON.stringify({\n        planName: selectedPlanDetails.name,\n        planPrice: selectedPlanDetails.price,\n        userId: sessionStorage.getItem('userId'),\n      }),\n    });\n\n    const { approvalUrl } = await response.json();\n\n    window.paypal.Buttons({\n      createSubscription: function () {\n        return approvalUrl;\n      },\n      onApprove: function (data, actions) {\n        const subscriptionID = data.subscriptionID;\n        sessionStorage.setItem('subscriptionID', subscriptionID);\n        sessionStorage.setItem('isSubscribed', 'true');\n\n        fetch(`${baseUrl}/api/payments/complete-subscription?orderId=${subscriptionID}&userId=${sessionStorage.getItem('userId')}`)\n          .then(response => response.json())\n          .then(data => console.log('Payment complete:', data))\n          .catch(error => console.error('Error completing subscription:', error));\n      },\n      onError: function (err) {\n        console.error('PayPal Error:', err);\n      }\n    }).render('#paypal-button-container');\n  };\n\n  const handleSelectPlan = (plan) => {\n    setSelectedPlan(plan.planId);\n    setSelectedPlanDetails({ name: plan.name, price: plan.price });\n    renderPayPalButton(plan.planId);\n    document.getElementById('paypal-button-container').scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <div className=\"payment-page\">\n      <h2>Select a Plan</h2>\n      <div className=\"plans-container\">\n        {plans.map((plan, index) => (\n          <div className=\"plan-card\" key={index}>\n            <h3>{plan.name}</h3>\n            <p>${plan.price} per month</p>\n            <p>{plan.storage} Storage</p>\n            <button onClick={() => handleSelectPlan(plan)}>\n              Select {plan.name}\n            </button>\n          </div>\n        ))}\n      </div>\n\n      {selectedPlan && (\n        <div className=\"selected-plan-details\">\n          <h3>Selected Plan</h3>\n          <p><strong>Name:</strong> {selectedPlanDetails.name}</p>\n          <p><strong>Price:</strong> ${selectedPlanDetails.price}</p>\n        </div>\n      )}\n\n      <div id=\"paypal-button-container\"></div>\n    </div>\n  );\n};\n\nexport default PaymentPage;\n"],"mappings":";;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}